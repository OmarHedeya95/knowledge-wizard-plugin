/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
      mod.exports
    );
  };
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, "default", { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  },
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return (
        val !== null &&
        !isUndefined(val) &&
        val.constructor !== null &&
        !isUndefined(val.constructor) &&
        typeof val.constructor.isBuffer === "function" &&
        val.constructor.isBuffer(val)
      );
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (
        typeof navigator !== "undefined" &&
        (navigator.product === "ReactNative" ||
          navigator.product === "NativeScript" ||
          navigator.product === "NS")
      ) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
    };
  },
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val)
        .replace(/%3A/gi, ":")
        .replace(/%24/g, "$")
        .replace(/%2C/gi, ",")
        .replace(/%20/g, "+")
        .replace(/%5B/gi, "[")
        .replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  },
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(
      fulfilled,
      rejected,
      options
    ) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null,
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  },
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (
          name !== normalizedName &&
          name.toUpperCase() === normalizedName.toUpperCase()
        ) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  },
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(
      error,
      config,
      code,
      request2,
      response
    ) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request2;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status:
            this.response && this.response.status ? this.response.status : null,
        };
      };
      return error;
    };
  },
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false,
    };
  },
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(
      message,
      config,
      code,
      request2,
      response
    ) {
      var error = new Error(message);
      return enhanceError(error, config, code, request2, response);
    };
  },
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (
        !response.status ||
        !validateStatus ||
        validateStatus(response.status)
      ) {
        resolve(response);
      } else {
        reject(
          createError(
            "Request failed with status code " + response.status,
            response.config,
            null,
            response.request,
            response
          )
        );
      }
    };
  },
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv()
      ? (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + "=" + encodeURIComponent(value));
              if (utils.isNumber(expires)) {
                cookie.push("expires=" + new Date(expires).toGMTString());
              }
              if (utils.isString(path)) {
                cookie.push("path=" + path);
              }
              if (utils.isString(domain)) {
                cookie.push("domain=" + domain);
              }
              if (secure === true) {
                cookie.push("secure");
              }
              document.cookie = cookie.join("; ");
            },
            read: function read(name) {
              var match = document.cookie.match(
                new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
              );
              return match ? decodeURIComponent(match[3]) : null;
            },
            remove: function remove(name) {
              this.write(name, "", Date.now() - 864e5);
            },
          };
        })()
      : (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() {
              return null;
            },
            remove: function remove() {},
          };
        })();
  },
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  },
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "")
        : baseURL;
    };
  },
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  },
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent",
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  },
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv()
      ? (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement("a");
          var originURL;
          function resolveURL(url) {
            var href = url;
            if (msie) {
              urlParsingNode.setAttribute("href", href);
              href = urlParsingNode.href;
            }
            urlParsingNode.setAttribute("href", href);
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol
                ? urlParsingNode.protocol.replace(/:$/, "")
                : "",
              host: urlParsingNode.host,
              search: urlParsingNode.search
                ? urlParsingNode.search.replace(/^\?/, "")
                : "",
              hash: urlParsingNode.hash
                ? urlParsingNode.hash.replace(/^#/, "")
                : "",
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname:
                urlParsingNode.pathname.charAt(0) === "/"
                  ? urlParsingNode.pathname
                  : "/" + urlParsingNode.pathname,
            };
          }
          originURL = resolveURL(window.location.href);
          return function isURLSameOrigin(requestURL) {
            var parsed = utils.isString(requestURL)
              ? resolveURL(requestURL)
              : requestURL;
            return (
              parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host
            );
          };
        })()
      : (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })();
  },
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  },
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request2 = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password
            ? unescape(encodeURIComponent(config.auth.password))
            : "";
          requestHeaders.Authorization =
            "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request2.open(
          config.method.toUpperCase(),
          buildURL(fullPath, config.params, config.paramsSerializer),
          true
        );
        request2.timeout = config.timeout;
        function onloadend() {
          if (!request2) {
            return;
          }
          var responseHeaders =
            "getAllResponseHeaders" in request2
              ? parseHeaders(request2.getAllResponseHeaders())
              : null;
          var responseData =
            !responseType || responseType === "text" || responseType === "json"
              ? request2.responseText
              : request2.response;
          var response = {
            data: responseData,
            status: request2.status,
            statusText: request2.statusText,
            headers: responseHeaders,
            config,
            request: request2,
          };
          settle(
            function _resolve(value) {
              resolve(value);
              done();
            },
            function _reject(err) {
              reject(err);
              done();
            },
            response
          );
          request2 = null;
        }
        if ("onloadend" in request2) {
          request2.onloadend = onloadend;
        } else {
          request2.onreadystatechange = function handleLoad() {
            if (!request2 || request2.readyState !== 4) {
              return;
            }
            if (
              request2.status === 0 &&
              !(
                request2.responseURL &&
                request2.responseURL.indexOf("file:") === 0
              )
            ) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request2.onabort = function handleAbort() {
          if (!request2) {
            return;
          }
          reject(
            createError("Request aborted", config, "ECONNABORTED", request2)
          );
          request2 = null;
        };
        request2.onerror = function handleError() {
          reject(createError("Network Error", config, null, request2));
          request2 = null;
        };
        request2.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout
            ? "timeout of " + config.timeout + "ms exceeded"
            : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(
            createError(
              timeoutErrorMessage,
              config,
              transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              request2
            )
          );
          request2 = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue =
            (config.withCredentials || isURLSameOrigin(fullPath)) &&
            config.xsrfCookieName
              ? cookies.read(config.xsrfCookieName)
              : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request2) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (
              typeof requestData === "undefined" &&
              key.toLowerCase() === "content-type"
            ) {
              delete requestHeaders[key];
            } else {
              request2.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request2.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request2.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request2.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request2.upload) {
          request2.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function (cancel) {
            if (!request2) {
              return;
            }
            reject(
              !cancel || (cancel && cancel.type)
                ? new Cancel("canceled")
                : cancel
            );
            request2.abort();
            request2 = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted
              ? onCanceled()
              : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request2.send(requestData);
      });
    };
  },
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded",
    };
    function setContentTypeIfUnset(headers, value) {
      if (
        !utils.isUndefined(headers) &&
        utils.isUndefined(headers["Content-Type"])
      ) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (
        typeof process !== "undefined" &&
        Object.prototype.toString.call(process) === "[object process]"
      ) {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [
        function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (
            utils.isFormData(data) ||
            utils.isArrayBuffer(data) ||
            utils.isBuffer(data) ||
            utils.isStream(data) ||
            utils.isFile(data) ||
            utils.isBlob(data)
          ) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(
              headers,
              "application/x-www-form-urlencoded;charset=utf-8"
            );
            return data.toString();
          }
          if (
            utils.isObject(data) ||
            (headers && headers["Content-Type"] === "application/json")
          ) {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        },
      ],
      transformResponse: [
        function transformResponse(data) {
          var transitional = this.transitional || defaults.transitional;
          var silentJSONParsing =
            transitional && transitional.silentJSONParsing;
          var forcedJSONParsing =
            transitional && transitional.forcedJSONParsing;
          var strictJSONParsing =
            !silentJSONParsing && this.responseType === "json";
          if (
            strictJSONParsing ||
            (forcedJSONParsing && utils.isString(data) && data.length)
          ) {
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw enhanceError(e, this, "E_JSON_PARSE");
                }
                throw e;
              }
            }
          }
          return data;
        },
      ],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          Accept: "application/json, text/plain, */*",
        },
      },
    };
    utils.forEach(
      ["delete", "get", "head"],
      function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      }
    );
    utils.forEach(
      ["post", "put", "patch"],
      function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      }
    );
    module2.exports = defaults;
  },
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  },
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  },
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(
        function onAdapterResolution(response) {
          throwIfCancellationRequested(config);
          response.data = transformData.call(
            config,
            response.data,
            response.headers,
            config.transformResponse
          );
          return response;
        },
        function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config,
                reason.response.data,
                reason.response.headers,
                config.transformResponse
              );
            }
          }
          return Promise.reject(reason);
        }
      );
    };
  },
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
      };
      utils.forEach(
        Object.keys(config1).concat(Object.keys(config2)),
        function computeConfigValue(prop) {
          var merge = mergeMap[prop] || mergeDeepProperties;
          var configValue = merge(prop);
          (utils.isUndefined(configValue) && merge !== mergeDirectKeys) ||
            (config[prop] = configValue);
        }
      );
      return config;
    };
  },
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      version: "0.26.1",
    };
  },
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(
      function (type, i) {
        validators[type] = function validator(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        };
      }
    );
    var deprecatedWarnings = {};
    validators.transitional = function transitional(
      validator,
      version,
      message
    ) {
      function formatMessage(opt, desc) {
        return (
          "[Axios v" +
          VERSION +
          "] Transitional option '" +
          opt +
          "'" +
          desc +
          (message ? ". " + message : "")
        );
      }
      return function (value, opt, opts) {
        if (validator === false) {
          throw new Error(
            formatMessage(
              opt,
              " has been removed" + (version ? " in " + version : "")
            )
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" +
                version +
                " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators,
    };
  },
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager(),
      };
    }
    Axios.prototype.request = function request2(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(
          transitional,
          {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean),
          },
          false
        );
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(
        interceptor
      ) {
        if (
          typeof interceptor.runWhen === "function" &&
          interceptor.runWhen(config) === false
        ) {
          return;
        }
        synchronousRequestInterceptors =
          synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(
          interceptor.fulfilled,
          interceptor.rejected
        );
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(
        interceptor
      ) {
        responseInterceptorChain.push(
          interceptor.fulfilled,
          interceptor.rejected
        );
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(
          responseInterceptorChain.shift(),
          responseInterceptorChain.shift()
        );
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(
        config.url,
        config.params,
        config.paramsSerializer
      ).replace(/^\?/, "");
    };
    utils.forEach(
      ["delete", "get", "head", "options"],
      function forEachMethodNoData(method) {
        Axios.prototype[method] = function (url, config) {
          return this.request(
            mergeConfig(config || {}, {
              method,
              url,
              data: (config || {}).data,
            })
          );
        };
      }
    );
    utils.forEach(
      ["post", "put", "patch"],
      function forEachMethodWithData(method) {
        Axios.prototype[method] = function (url, data, config) {
          return this.request(
            mergeConfig(config || {}, {
              method,
              url,
              data,
            })
          );
        };
      }
    );
    module2.exports = Axios;
  },
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function (cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function (onfulfilled) {
        var _resolve;
        var promise = new Promise(function (resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel,
      };
    };
    module2.exports = CancelToken;
  },
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  },
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  },
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  },
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  },
});

// node_modules/openai/dist/base.js
var require_base = __commonJS({
  "node_modules/openai/dist/base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequiredError =
      exports.BaseAPI =
      exports.COLLECTION_FORMATS =
      exports.BASE_PATH =
        void 0;
    var axios_1 = require_axios2();
    exports.BASE_PATH = "https://api.openai.com/v1".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|",
    };
    var BaseAPI = class {
      constructor(
        configuration,
        basePath = exports.BASE_PATH,
        axios = axios_1.default
      ) {
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
          this.configuration = configuration;
          this.basePath = configuration.basePath || this.basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
  },
});

// node_modules/openai/dist/common.js
var require_common = __commonJS({
  "node_modules/openai/dist/common.js"(exports) {
    "use strict";
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction =
      exports.toPathString =
      exports.serializeDataIfNeeded =
      exports.setSearchParams =
      exports.setOAuthToObject =
      exports.setBearerAuthToObject =
      exports.setBasicAuthToObject =
      exports.setApiKeyToObject =
      exports.assertParamExists =
      exports.DUMMY_BASE_URL =
        void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    exports.assertParamExists = function (functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(
          paramName,
          `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
        );
      }
    };
    exports.setApiKeyToObject = function (object, keyParamName, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.apiKey) {
          const localVarApiKeyValue =
            typeof configuration.apiKey === "function"
              ? yield configuration.apiKey(keyParamName)
              : yield configuration.apiKey;
          object[keyParamName] = localVarApiKeyValue;
        }
      });
    };
    exports.setBasicAuthToObject = function (object, configuration) {
      if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }
    };
    exports.setBearerAuthToObject = function (object, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const accessToken =
            typeof configuration.accessToken === "function"
              ? yield configuration.accessToken()
              : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + accessToken;
        }
      });
    };
    exports.setOAuthToObject = function (object, name, scopes, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const localVarAccessTokenValue =
            typeof configuration.accessToken === "function"
              ? yield configuration.accessToken(name, scopes)
              : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + localVarAccessTokenValue;
        }
      });
    };
    function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
      if (parameter == null) return;
      if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
          parameter.forEach((item) =>
            setFlattenedQueryParams(urlSearchParams, item, key)
          );
        } else {
          Object.keys(parameter).forEach((currentKey) =>
            setFlattenedQueryParams(
              urlSearchParams,
              parameter[currentKey],
              `${key}${key !== "" ? "." : ""}${currentKey}`
            )
          );
        }
      } else {
        if (urlSearchParams.has(key)) {
          urlSearchParams.append(key, parameter);
        } else {
          urlSearchParams.set(key, parameter);
        }
      }
    }
    exports.setSearchParams = function (url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      setFlattenedQueryParams(searchParams, objects);
      url.search = searchParams.toString();
    };
    exports.serializeDataIfNeeded = function (
      value,
      requestOptions,
      configuration
    ) {
      const nonString = typeof value !== "string";
      const needsSerialization =
        nonString && configuration && configuration.isJsonMime
          ? configuration.isJsonMime(requestOptions.headers["Content-Type"])
          : nonString;
      return needsSerialization
        ? JSON.stringify(value !== void 0 ? value : {})
        : value || "";
    };
    exports.toPathString = function (url) {
      return url.pathname + url.search + url.hash;
    };
    exports.createRequestFunction = function (
      axiosArgs,
      globalAxios,
      BASE_PATH,
      configuration
    ) {
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(
          Object.assign({}, axiosArgs.options),
          {
            url:
              ((configuration === null || configuration === void 0
                ? void 0
                : configuration.basePath) || basePath) + axiosArgs.url,
          }
        );
        return axios.request(axiosRequestArgs);
      };
    };
  },
});

// node_modules/openai/dist/api.js
var require_api = __commonJS({
  "node_modules/openai/dist/api.js"(exports) {
    "use strict";
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenAIApi =
      exports.OpenAIApiFactory =
      exports.OpenAIApiFp =
      exports.OpenAIApiAxiosParamCreator =
      exports.CreateImageRequestResponseFormatEnum =
      exports.CreateImageRequestSizeEnum =
      exports.ChatCompletionResponseMessageRoleEnum =
      exports.ChatCompletionRequestMessageRoleEnum =
        void 0;
    var axios_1 = require_axios2();
    var common_1 = require_common();
    var base_1 = require_base();
    exports.ChatCompletionRequestMessageRoleEnum = {
      System: "system",
      User: "user",
      Assistant: "assistant",
      Function: "function",
    };
    exports.ChatCompletionResponseMessageRoleEnum = {
      System: "system",
      User: "user",
      Assistant: "assistant",
      Function: "function",
    };
    exports.CreateImageRequestSizeEnum = {
      _256x256: "256x256",
      _512x512: "512x512",
      _1024x1024: "1024x1024",
    };
    exports.CreateImageRequestResponseFormatEnum = {
      Url: "url",
      B64Json: "b64_json",
    };
    exports.OpenAIApiAxiosParamCreator = function (configuration) {
      return {
        cancelFineTune: (fineTuneId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "cancelFineTune",
              "fineTuneId",
              fineTuneId
            );
            const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`.replace(
              `{${"fine_tune_id"}}`,
              encodeURIComponent(String(fineTuneId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createAnswer: (createAnswerRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createAnswer",
              "createAnswerRequest",
              createAnswerRequest
            );
            const localVarPath = `/answers`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createAnswerRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createChatCompletion: (createChatCompletionRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createChatCompletion",
              "createChatCompletionRequest",
              createChatCompletionRequest
            );
            const localVarPath = `/chat/completions`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createChatCompletionRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createClassification: (createClassificationRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createClassification",
              "createClassificationRequest",
              createClassificationRequest
            );
            const localVarPath = `/classifications`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createClassificationRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createCompletion: (createCompletionRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createCompletion",
              "createCompletionRequest",
              createCompletionRequest
            );
            const localVarPath = `/completions`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createCompletionRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createEdit: (createEditRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createEdit",
              "createEditRequest",
              createEditRequest
            );
            const localVarPath = `/edits`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createEditRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createEmbedding: (createEmbeddingRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createEmbedding",
              "createEmbeddingRequest",
              createEmbeddingRequest
            );
            const localVarPath = `/embeddings`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createEmbeddingRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createFile: (file, purpose, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createFile", "file", file);
            common_1.assertParamExists("createFile", "purpose", purpose);
            const localVarPath = `/files`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration &&
              configuration.formDataCtor) ||
              FormData)();
            if (file !== void 0) {
              localVarFormParams.append("file", file);
            }
            if (purpose !== void 0) {
              localVarFormParams.append("purpose", purpose);
            }
            localVarHeaderParameter["Content-Type"] = "multipart/form-data";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign(
                  Object.assign({}, localVarHeaderParameter),
                  localVarFormParams.getHeaders()
                ),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = localVarFormParams;
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createFineTune: (createFineTuneRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createFineTune",
              "createFineTuneRequest",
              createFineTuneRequest
            );
            const localVarPath = `/fine-tunes`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createFineTuneRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createImage: (createImageRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createImage",
              "createImageRequest",
              createImageRequest
            );
            const localVarPath = `/images/generations`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createImageRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createImageEdit: (
          image,
          prompt,
          mask,
          n,
          size,
          responseFormat,
          user,
          options = {}
        ) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createImageEdit", "image", image);
            common_1.assertParamExists("createImageEdit", "prompt", prompt);
            const localVarPath = `/images/edits`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration &&
              configuration.formDataCtor) ||
              FormData)();
            if (image !== void 0) {
              localVarFormParams.append("image", image);
            }
            if (mask !== void 0) {
              localVarFormParams.append("mask", mask);
            }
            if (prompt !== void 0) {
              localVarFormParams.append("prompt", prompt);
            }
            if (n !== void 0) {
              localVarFormParams.append("n", n);
            }
            if (size !== void 0) {
              localVarFormParams.append("size", size);
            }
            if (responseFormat !== void 0) {
              localVarFormParams.append("response_format", responseFormat);
            }
            if (user !== void 0) {
              localVarFormParams.append("user", user);
            }
            localVarHeaderParameter["Content-Type"] = "multipart/form-data";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign(
                  Object.assign({}, localVarHeaderParameter),
                  localVarFormParams.getHeaders()
                ),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = localVarFormParams;
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createImageVariation: (
          image,
          n,
          size,
          responseFormat,
          user,
          options = {}
        ) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createImageVariation", "image", image);
            const localVarPath = `/images/variations`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration &&
              configuration.formDataCtor) ||
              FormData)();
            if (image !== void 0) {
              localVarFormParams.append("image", image);
            }
            if (n !== void 0) {
              localVarFormParams.append("n", n);
            }
            if (size !== void 0) {
              localVarFormParams.append("size", size);
            }
            if (responseFormat !== void 0) {
              localVarFormParams.append("response_format", responseFormat);
            }
            if (user !== void 0) {
              localVarFormParams.append("user", user);
            }
            localVarHeaderParameter["Content-Type"] = "multipart/form-data";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign(
                  Object.assign({}, localVarHeaderParameter),
                  localVarFormParams.getHeaders()
                ),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = localVarFormParams;
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createModeration: (createModerationRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "createModeration",
              "createModerationRequest",
              createModerationRequest
            );
            const localVarPath = `/moderations`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createModerationRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createSearch: (engineId, createSearchRequest, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createSearch", "engineId", engineId);
            common_1.assertParamExists(
              "createSearch",
              "createSearchRequest",
              createSearchRequest
            );
            const localVarPath = `/engines/{engine_id}/search`.replace(
              `{${"engine_id"}}`,
              encodeURIComponent(String(engineId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(
              createSearchRequest,
              localVarRequestOptions,
              configuration
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createTranscription: (
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          language,
          options = {}
        ) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createTranscription", "file", file);
            common_1.assertParamExists("createTranscription", "model", model);
            const localVarPath = `/audio/transcriptions`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration &&
              configuration.formDataCtor) ||
              FormData)();
            if (file !== void 0) {
              localVarFormParams.append("file", file);
            }
            if (model !== void 0) {
              localVarFormParams.append("model", model);
            }
            if (prompt !== void 0) {
              localVarFormParams.append("prompt", prompt);
            }
            if (responseFormat !== void 0) {
              localVarFormParams.append("response_format", responseFormat);
            }
            if (temperature !== void 0) {
              localVarFormParams.append("temperature", temperature);
            }
            if (language !== void 0) {
              localVarFormParams.append("language", language);
            }
            localVarHeaderParameter["Content-Type"] = "multipart/form-data";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign(
                  Object.assign({}, localVarHeaderParameter),
                  localVarFormParams.getHeaders()
                ),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = localVarFormParams;
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        createTranslation: (
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          options = {}
        ) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("createTranslation", "file", file);
            common_1.assertParamExists("createTranslation", "model", model);
            const localVarPath = `/audio/translations`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "POST" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration &&
              configuration.formDataCtor) ||
              FormData)();
            if (file !== void 0) {
              localVarFormParams.append("file", file);
            }
            if (model !== void 0) {
              localVarFormParams.append("model", model);
            }
            if (prompt !== void 0) {
              localVarFormParams.append("prompt", prompt);
            }
            if (responseFormat !== void 0) {
              localVarFormParams.append("response_format", responseFormat);
            }
            if (temperature !== void 0) {
              localVarFormParams.append("temperature", temperature);
            }
            localVarHeaderParameter["Content-Type"] = "multipart/form-data";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign(
                  Object.assign({}, localVarHeaderParameter),
                  localVarFormParams.getHeaders()
                ),
                headersFromBaseOptions
              ),
              options.headers
            );
            localVarRequestOptions.data = localVarFormParams;
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        deleteFile: (fileId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("deleteFile", "fileId", fileId);
            const localVarPath = `/files/{file_id}`.replace(
              `{${"file_id"}}`,
              encodeURIComponent(String(fileId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "DELETE" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        deleteModel: (model, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("deleteModel", "model", model);
            const localVarPath = `/models/{model}`.replace(
              `{${"model"}}`,
              encodeURIComponent(String(model))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "DELETE" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        downloadFile: (fileId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("downloadFile", "fileId", fileId);
            const localVarPath = `/files/{file_id}/content`.replace(
              `{${"file_id"}}`,
              encodeURIComponent(String(fileId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        listEngines: (options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/engines`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        listFiles: (options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/files`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        listFineTuneEvents: (fineTuneId, stream, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "listFineTuneEvents",
              "fineTuneId",
              fineTuneId
            );
            const localVarPath = `/fine-tunes/{fine_tune_id}/events`.replace(
              `{${"fine_tune_id"}}`,
              encodeURIComponent(String(fineTuneId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (stream !== void 0) {
              localVarQueryParameter["stream"] = stream;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        listFineTunes: (options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/fine-tunes`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        listModels: (options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/models`;
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        retrieveEngine: (engineId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("retrieveEngine", "engineId", engineId);
            const localVarPath = `/engines/{engine_id}`.replace(
              `{${"engine_id"}}`,
              encodeURIComponent(String(engineId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        retrieveFile: (fileId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("retrieveFile", "fileId", fileId);
            const localVarPath = `/files/{file_id}`.replace(
              `{${"file_id"}}`,
              encodeURIComponent(String(fileId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        retrieveFineTune: (fineTuneId, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists(
              "retrieveFineTune",
              "fineTuneId",
              fineTuneId
            );
            const localVarPath = `/fine-tunes/{fine_tune_id}`.replace(
              `{${"fine_tune_id"}}`,
              encodeURIComponent(String(fineTuneId))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
        retrieveModel: (model, options = {}) =>
          __awaiter(this, void 0, void 0, function* () {
            common_1.assertParamExists("retrieveModel", "model", model);
            const localVarPath = `/models/{model}`.replace(
              `{${"model"}}`,
              encodeURIComponent(String(model))
            );
            const localVarUrlObj = new URL(
              localVarPath,
              common_1.DUMMY_BASE_URL
            );
            let baseOptions;
            if (configuration) {
              baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(
              Object.assign({ method: "GET" }, baseOptions),
              options
            );
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
              baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(
              Object.assign(
                Object.assign({}, localVarHeaderParameter),
                headersFromBaseOptions
              ),
              options.headers
            );
            return {
              url: common_1.toPathString(localVarUrlObj),
              options: localVarRequestOptions,
            };
          }),
      };
    };
    exports.OpenAIApiFp = function (configuration) {
      const localVarAxiosParamCreator =
        exports.OpenAIApiAxiosParamCreator(configuration);
      return {
        cancelFineTune(fineTuneId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.cancelFineTune(
                fineTuneId,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createAnswer(createAnswerRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createAnswer(
                createAnswerRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createChatCompletion(createChatCompletionRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createChatCompletion(
                createChatCompletionRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createClassification(createClassificationRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createClassification(
                createClassificationRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createCompletion(createCompletionRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createCompletion(
                createCompletionRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createEdit(createEditRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createEdit(
                createEditRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createEmbedding(createEmbeddingRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createEmbedding(
                createEmbeddingRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createFile(file, purpose, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createFile(
                file,
                purpose,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createFineTune(createFineTuneRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createFineTune(
                createFineTuneRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createImage(createImageRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createImage(
                createImageRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createImageEdit(
          image,
          prompt,
          mask,
          n,
          size,
          responseFormat,
          user,
          options
        ) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createImageEdit(
                image,
                prompt,
                mask,
                n,
                size,
                responseFormat,
                user,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createImageVariation(image, n, size, responseFormat, user, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createImageVariation(
                image,
                n,
                size,
                responseFormat,
                user,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createModeration(createModerationRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createModeration(
                createModerationRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createSearch(engineId, createSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createSearch(
                engineId,
                createSearchRequest,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createTranscription(
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          language,
          options
        ) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createTranscription(
                file,
                model,
                prompt,
                responseFormat,
                temperature,
                language,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        createTranslation(
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          options
        ) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.createTranslation(
                file,
                model,
                prompt,
                responseFormat,
                temperature,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        deleteFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.deleteFile(fileId, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        deleteModel(model, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.deleteModel(model, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        downloadFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.downloadFile(fileId, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        listEngines(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.listEngines(options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        listFiles(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(
              options
            );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        listFineTuneEvents(fineTuneId, stream, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.listFineTuneEvents(
                fineTuneId,
                stream,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        listFineTunes(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.listFineTunes(options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        listModels(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.listModels(options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        retrieveEngine(engineId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.retrieveEngine(engineId, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        retrieveFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.retrieveFile(fileId, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        retrieveFineTune(fineTuneId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.retrieveFineTune(
                fineTuneId,
                options
              );
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
        retrieveModel(model, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs =
              yield localVarAxiosParamCreator.retrieveModel(model, options);
            return common_1.createRequestFunction(
              localVarAxiosArgs,
              axios_1.default,
              base_1.BASE_PATH,
              configuration
            );
          });
        },
      };
    };
    exports.OpenAIApiFactory = function (configuration, basePath, axios) {
      const localVarFp = exports.OpenAIApiFp(configuration);
      return {
        cancelFineTune(fineTuneId, options) {
          return localVarFp
            .cancelFineTune(fineTuneId, options)
            .then((request2) => request2(axios, basePath));
        },
        createAnswer(createAnswerRequest, options) {
          return localVarFp
            .createAnswer(createAnswerRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createChatCompletion(createChatCompletionRequest, options) {
          return localVarFp
            .createChatCompletion(createChatCompletionRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createClassification(createClassificationRequest, options) {
          return localVarFp
            .createClassification(createClassificationRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createCompletion(createCompletionRequest, options) {
          return localVarFp
            .createCompletion(createCompletionRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createEdit(createEditRequest, options) {
          return localVarFp
            .createEdit(createEditRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createEmbedding(createEmbeddingRequest, options) {
          return localVarFp
            .createEmbedding(createEmbeddingRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createFile(file, purpose, options) {
          return localVarFp
            .createFile(file, purpose, options)
            .then((request2) => request2(axios, basePath));
        },
        createFineTune(createFineTuneRequest, options) {
          return localVarFp
            .createFineTune(createFineTuneRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createImage(createImageRequest, options) {
          return localVarFp
            .createImage(createImageRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createImageEdit(
          image,
          prompt,
          mask,
          n,
          size,
          responseFormat,
          user,
          options
        ) {
          return localVarFp
            .createImageEdit(
              image,
              prompt,
              mask,
              n,
              size,
              responseFormat,
              user,
              options
            )
            .then((request2) => request2(axios, basePath));
        },
        createImageVariation(image, n, size, responseFormat, user, options) {
          return localVarFp
            .createImageVariation(image, n, size, responseFormat, user, options)
            .then((request2) => request2(axios, basePath));
        },
        createModeration(createModerationRequest, options) {
          return localVarFp
            .createModeration(createModerationRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createSearch(engineId, createSearchRequest, options) {
          return localVarFp
            .createSearch(engineId, createSearchRequest, options)
            .then((request2) => request2(axios, basePath));
        },
        createTranscription(
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          language,
          options
        ) {
          return localVarFp
            .createTranscription(
              file,
              model,
              prompt,
              responseFormat,
              temperature,
              language,
              options
            )
            .then((request2) => request2(axios, basePath));
        },
        createTranslation(
          file,
          model,
          prompt,
          responseFormat,
          temperature,
          options
        ) {
          return localVarFp
            .createTranslation(
              file,
              model,
              prompt,
              responseFormat,
              temperature,
              options
            )
            .then((request2) => request2(axios, basePath));
        },
        deleteFile(fileId, options) {
          return localVarFp
            .deleteFile(fileId, options)
            .then((request2) => request2(axios, basePath));
        },
        deleteModel(model, options) {
          return localVarFp
            .deleteModel(model, options)
            .then((request2) => request2(axios, basePath));
        },
        downloadFile(fileId, options) {
          return localVarFp
            .downloadFile(fileId, options)
            .then((request2) => request2(axios, basePath));
        },
        listEngines(options) {
          return localVarFp
            .listEngines(options)
            .then((request2) => request2(axios, basePath));
        },
        listFiles(options) {
          return localVarFp
            .listFiles(options)
            .then((request2) => request2(axios, basePath));
        },
        listFineTuneEvents(fineTuneId, stream, options) {
          return localVarFp
            .listFineTuneEvents(fineTuneId, stream, options)
            .then((request2) => request2(axios, basePath));
        },
        listFineTunes(options) {
          return localVarFp
            .listFineTunes(options)
            .then((request2) => request2(axios, basePath));
        },
        listModels(options) {
          return localVarFp
            .listModels(options)
            .then((request2) => request2(axios, basePath));
        },
        retrieveEngine(engineId, options) {
          return localVarFp
            .retrieveEngine(engineId, options)
            .then((request2) => request2(axios, basePath));
        },
        retrieveFile(fileId, options) {
          return localVarFp
            .retrieveFile(fileId, options)
            .then((request2) => request2(axios, basePath));
        },
        retrieveFineTune(fineTuneId, options) {
          return localVarFp
            .retrieveFineTune(fineTuneId, options)
            .then((request2) => request2(axios, basePath));
        },
        retrieveModel(model, options) {
          return localVarFp
            .retrieveModel(model, options)
            .then((request2) => request2(axios, basePath));
        },
      };
    };
    var OpenAIApi2 = class extends base_1.BaseAPI {
      cancelFineTune(fineTuneId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .cancelFineTune(fineTuneId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createAnswer(createAnswerRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createAnswer(createAnswerRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createChatCompletion(createChatCompletionRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createChatCompletion(createChatCompletionRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createClassification(createClassificationRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createClassification(createClassificationRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createCompletion(createCompletionRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createCompletion(createCompletionRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createEdit(createEditRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createEdit(createEditRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createEmbedding(createEmbeddingRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createEmbedding(createEmbeddingRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createFile(file, purpose, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createFile(file, purpose, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createFineTune(createFineTuneRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createFineTune(createFineTuneRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createImage(createImageRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createImage(createImageRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createImageEdit(
        image,
        prompt,
        mask,
        n,
        size,
        responseFormat,
        user,
        options
      ) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createImageEdit(
            image,
            prompt,
            mask,
            n,
            size,
            responseFormat,
            user,
            options
          )
          .then((request2) => request2(this.axios, this.basePath));
      }
      createImageVariation(image, n, size, responseFormat, user, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createImageVariation(image, n, size, responseFormat, user, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createModeration(createModerationRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createModeration(createModerationRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createSearch(engineId, createSearchRequest, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createSearch(engineId, createSearchRequest, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      createTranscription(
        file,
        model,
        prompt,
        responseFormat,
        temperature,
        language,
        options
      ) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createTranscription(
            file,
            model,
            prompt,
            responseFormat,
            temperature,
            language,
            options
          )
          .then((request2) => request2(this.axios, this.basePath));
      }
      createTranslation(
        file,
        model,
        prompt,
        responseFormat,
        temperature,
        options
      ) {
        return exports
          .OpenAIApiFp(this.configuration)
          .createTranslation(
            file,
            model,
            prompt,
            responseFormat,
            temperature,
            options
          )
          .then((request2) => request2(this.axios, this.basePath));
      }
      deleteFile(fileId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .deleteFile(fileId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      deleteModel(model, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .deleteModel(model, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      downloadFile(fileId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .downloadFile(fileId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      listEngines(options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .listEngines(options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      listFiles(options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .listFiles(options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      listFineTuneEvents(fineTuneId, stream, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .listFineTuneEvents(fineTuneId, stream, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      listFineTunes(options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .listFineTunes(options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      listModels(options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .listModels(options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      retrieveEngine(engineId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .retrieveEngine(engineId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      retrieveFile(fileId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .retrieveFile(fileId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      retrieveFineTune(fineTuneId, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .retrieveFineTune(fineTuneId, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
      retrieveModel(model, options) {
        return exports
          .OpenAIApiFp(this.configuration)
          .retrieveModel(model, options)
          .then((request2) => request2(this.axios, this.basePath));
      }
    };
    exports.OpenAIApi = OpenAIApi2;
  },
});

// node_modules/openai/package.json
var require_package = __commonJS({
  "node_modules/openai/package.json"(exports, module2) {
    module2.exports = {
      name: "openai",
      version: "3.3.0",
      description: "Node.js library for the OpenAI API",
      repository: {
        type: "git",
        url: "git@github.com:openai/openai-node.git",
      },
      keywords: ["openai", "open", "ai", "gpt-3", "gpt3"],
      author: "OpenAI",
      license: "MIT",
      main: "./dist/index.js",
      types: "./dist/index.d.ts",
      scripts: {
        build: "tsc --outDir dist/",
      },
      dependencies: {
        axios: "^0.26.0",
        "form-data": "^4.0.0",
      },
      devDependencies: {
        "@types/node": "^12.11.5",
        typescript: "^3.6.4",
      },
    };
  },
});

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module2) {
    module2.exports = typeof self == "object" ? self.FormData : window.FormData;
  },
});

// node_modules/openai/dist/configuration.js
var require_configuration = __commonJS({
  "node_modules/openai/dist/configuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = void 0;
    var packageJson = require_package();
    var Configuration2 = class {
      constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.organization = param.organization;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions) {
          this.baseOptions = {};
        }
        this.baseOptions.headers = Object.assign(
          {
            "User-Agent": `OpenAI/NodeJS/${packageJson.version}`,
            Authorization: `Bearer ${this.apiKey}`,
          },
          this.baseOptions.headers
        );
        if (this.organization) {
          this.baseOptions.headers["OpenAI-Organization"] = this.organization;
        }
        if (!this.formDataCtor) {
          this.formDataCtor = require_browser();
        }
      }
      isJsonMime(mime) {
        const jsonMime = new RegExp(
          "^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$",
          "i"
        );
        return (
          mime !== null &&
          (jsonMime.test(mime) ||
            mime.toLowerCase() === "application/json-patch+json")
        );
      }
    };
    exports.Configuration = Configuration2;
  },
});

// node_modules/openai/dist/index.js
var require_dist = __commonJS({
  "node_modules/openai/dist/index.js"(exports) {
    "use strict";
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __exportStar =
      (exports && exports.__exportStar) ||
      function (m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            __createBinding(exports2, m, p);
      };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  },
});

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell =
      exports.NewlineTransformer =
      exports.PythonShellError =
        void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function (source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {};
    exports.PythonShellError = PythonShellError;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData) data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData) this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell = class extends events_1.EventEmitter {
      constructor(
        scriptPath,
        options,
        stdoutSplitter = null,
        stderrSplitter = null
      ) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error(
            "scriptPath cannot be empty! You must give a script for python to run"
          );
        let self2 = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell.defaultOptions, options);
        let pythonPath2;
        if (!options.pythonPath) {
          pythonPath2 = PythonShell.defaultPythonPath;
        } else pythonPath2 = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(
          options.scriptPath || "",
          scriptPath
        );
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(
          pythonPath2,
          this.command,
          options
        );
        ["stdout", "stdin", "stderr"].forEach(function (name) {
          self2[name] = self2.childProcess[name];
          self2.parser &&
            self2[name] &&
            self2[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter) stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self2.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter) stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self2.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function (data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function () {
            self2.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self2.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function () {
            self2.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self2.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function (err) {
          self2.emit("error", err);
        });
        this.childProcess.on("exit", function (code, signal) {
          self2.exitCode = code;
          self2.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (
            !self2.stderrHasEnded ||
            !self2.stdoutHasEnded ||
            (self2.exitCode == null && self2.exitSignal == null)
          )
            return;
          let err;
          if (self2.exitCode && self2.exitCode !== 0) {
            if (errorData) {
              err = self2.parseError(errorData);
            } else {
              err = new PythonShellError(
                "process exited with code " + self2.exitCode
              );
            }
            err = extend(err, {
              executable: pythonPath2,
              options: pythonOptions.length ? pythonOptions : null,
              script: self2.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self2.exitCode,
            });
            if (self2.listeners("pythonError").length || !self2._endCallback) {
              self2.emit("pythonError", err);
            }
          }
          self2.terminated = true;
          self2.emit("close");
          self2._endCallback &&
            self2._endCallback(err, self2.exitCode, self2.exitSignal);
        }
      }
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath =
            (0, os_1.tmpdir)() +
            path_1.sep +
            `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath
          ? this.defaultOptions.pythonPath
          : this.defaultPythonPath;
      }
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath2 = this.getPythonPath();
          let compileCommand = `${pythonPath2} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      static run(scriptPath, options, callback) {
        let pyshell = new PythonShell(scriptPath, options);
        let output = [];
        return pyshell
          .on("message", function (message) {
            output.push(message);
          })
          .end(function (err) {
            return callback(err ? err : null, output.length ? output : null);
          });
      }
      static runString(code, options, callback) {
        const randomInt = getRandomInt();
        const filePath =
          os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell.run(filePath, options, callback);
      }
      static getVersion(pythonPath2) {
        if (!pythonPath2) pythonPath2 = this.getPythonPath();
        return execPromise(pythonPath2 + " --version");
      }
      static getVersionSync(pythonPath2) {
        if (!pythonPath2) pythonPath2 = this.getPythonPath();
        return (0, child_process_1.execSync)(
          pythonPath2 + " --version"
        ).toString();
      }
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack +=
            os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      send(message) {
        if (!this.stdin) throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary") data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell;
    PythonShell.defaultPythonPath =
      process.platform != "win32" ? "python3" : "python";
    PythonShell.defaultOptions = {};
    PythonShell.format = {
      text: function toText(data) {
        if (!data) return "";
        else if (typeof data !== "string") return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      },
    };
    PythonShell.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      },
    };
  },
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VCWizardPlugin,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// view.ts
var import_obsidian = require("obsidian");
var WIZARD_VIEW = "wizard-view";
var WizardView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.icon = "sun";
  }
  getViewType() {
    return WIZARD_VIEW;
  }
  getDisplayText() {
    return "Related Ideas";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "Related Ideas", cls: "heading" });
  }
  async update(search_results) {
    const container = this.containerEl.children[1];
    container.empty();
    const outerDiv = container.createEl("h4", {
      text: "Related Ideas\n",
      cls: "heading",
    });
    for (let dict of search_results) {
      let source_name = Object.keys(dict)[0];
      let info = dict[source_name];
      let source_path = info["source_path"];
      let text = info["text"];
      const quote = container.createEl("blockquote", { text, cls: "quote" });
      const link = quote.createEl("a", {
        href: source_path,
        attr: { "data-path": source_path },
      });
      link.createEl("span", {
        text: "\n--" + source_name,
      });
    }
  }
  async onClose() {}
};

// main.ts
var fs = __toESM(require("fs"));
var { Configuration, OpenAIApi } = require_dist();
var pythonPath = "";
var scriptPath_AI = "";
var openaiAPIKey = "";
var pineconeAPIKey = "";
var pineconeIndexName = "";
var pineconeEnvName = "us-east1-gcp";
async function launch_python(pythonPath2, scriptPath, scriptName, args) {
  let { PythonShell } = require_python_shell();
  const options = {
    mode: "text",
    pythonPath: pythonPath2,
    scriptPath,
    args,
  };
  const result = await new Promise((resolve, reject) => {
    PythonShell.run(scriptName, options, function (err, results) {
      if (err) throw err;
      return resolve(results);
    });
  });
  return result;
}
function file_ready_for_hashtags(file_content) {
  return file_content.includes("#AddHashtags");
}
async function hashtag_generator(file_path, scriptName) {
  const scriptPath = scriptPath_AI;
  var args = [file_path, openaiAPIKey];
  const response = await launch_python(
    pythonPath,
    scriptPath,
    scriptName,
    args
  );
  console.log(response);
  return response;
}
function save_json(file_path, content) {
  const jsonString = JSON.stringify(content);
  fs.writeFile(file_path, jsonString, (err) => {
    if (err) {
      console.error(`Error saving the file: ${err}`);
      return;
    }
    console.log("File has been created");
  });
}
function append_to_json(file_path, key, value) {
  fs.readFile(file_path, (err, data) => {
    if (err) {
      throw err;
    }
    let oldData;
    try {
      oldData = JSON.parse(data);
    } catch (e) {
      oldData = {};
    }
    oldData[key] = value;
    const updatedJson = JSON.stringify(oldData);
    fs.writeFile(file_path, updatedJson, (err2) => {
      if (err2) throw err2;
    });
  });
}
var VCWizardPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.status = this.addStatusBarItem();
    this.registerView(WIZARD_VIEW, (leaf) => new WizardView(leaf));
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
      this.updateView([]);
    });
    this.status.setText("\u{1F9D9}: Knowledge Wizard is loading...");
    this.status.setAttr("title", "Wizard is loading....");
    this.addCommand({
      id: "index-vault",
      name: "Index Vault",
      callback: () => this.index_vault(),
    });
    this.addCommand({
      id: "index-changed-files",
      name: "Reindex New/Changed Files Only",
      callback: () => this.index_new_and_modified_files(),
    });
    this.addCommand({
      id: "find-similar-ideas",
      name: "Find Similar Ideas",
      editorCallback: (editor, view) => this.find_similar_ideas(editor, view),
    });
    this.addCommand({
      id: "hashtag-generator",
      name: "Add Hashtags to #AddHashtags Files",
      callback: () => this.add_hashtags(this.status),
    });
    this.registerInterval(
      window.setInterval(() => {
        console.log("Reindexing the vault at:");
        console.log((0, import_obsidian2.moment)().format("H:mm:ss"));
        this.index_new_and_modified_files();
      }, 1e6 * 2)
    );
    this.addSettingTab(new VCWizardSettingTab(this.app, this));
    this.registerEvent(
      this.app.vault.on("modify", (file) =>
        this.register_file_change(file, "modified" /* modified */)
      )
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) =>
        this.register_file_change(file, "deleted" /* deleted */)
      )
    );
    this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
    this.status.setAttr("title", "Wizard is ready");
    setTimeout(() => {
      this.registerCreatedFile();
    }, 500);
  }
  registerCreatedFile() {
    this.registerEvent(
      this.app.vault.on("create", (file) =>
        this.register_file_change(file, "new" /* new */)
      )
    );
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
    this.status.setText("\u{1F9D9}: Knowledge Wizard left");
    this.status.setAttr("title", "Wizard says \u{1F44B}");
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: WIZARD_VIEW,
      active: true,
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]
    );
  }
  async updateView(results) {
    var _a;
    const view =
      (_a = this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]) == null
        ? void 0
        : _a.view;
    if (view instanceof WizardView) {
      view.update(results);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    scriptPath_AI =
      this.settings.vaultPath + ".obsidian/plugins/knowledge-wizard";
    openaiAPIKey = this.settings.openAIKey;
    pineconeAPIKey = this.settings.pineconeKey;
    pineconeIndexName = this.settings.pineconeIndexName;
    pineconeEnvName = this.settings.pineconeEnv;
    pythonPath = this.settings.pythonPath;
  }
  async saveSettings() {
    await this.saveData(this.settings);
    scriptPath_AI =
      this.settings.vaultPath + ".obsidian/plugins/knowledge-wizard";
    openaiAPIKey = this.settings.openAIKey;
    pineconeEnvName = this.settings.pineconeEnv;
    pineconeAPIKey = this.settings.pineconeKey;
    pineconeIndexName = this.settings.pineconeIndexName;
    pythonPath = this.settings.pythonPath;
  }
  async add_hashtags(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText("\u{1F9D9}: Knowledge Wizard adding Hashtags...");
    status.setAttr("title", "Wizard is adding Hashtags...");
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (file_ready_for_hashtags(file_content)) {
        new import_obsidian2.Notice(`Adding Hashtags to: ${item.basename}`);
        let scriptName = "hashtag_generator.py";
        let vault_path = this.settings.vaultPath;
        let file_path = item.path;
        let full_path = vault_path + file_path;
        let response = await hashtag_generator(full_path, scriptName);
      }
    }
    new import_obsidian2.Notice("Done!");
    status.setText("\u{1F9D9}: Knowledge Wizard ready");
    status.setAttr("title", "Wizard is ready");
  }
  async find_similar_ideas(editor, view) {
    const sel = editor.getSelection();
    new import_obsidian2.Notice("Search in progress...");
    let scriptPath = scriptPath_AI;
    const scriptName = "similar_ideas_pinecone.py";
    var args = [
      sel,
      openaiAPIKey,
      this.settings.vaultPath,
      pineconeAPIKey,
      pineconeIndexName,
      pineconeEnvName,
    ];
    this.status.setText("\u{1F9D9} \u{1F50E}: Knowledge Wizard searching...");
    this.status.setAttr("title", "Wizard is searching for similar ideas");
    const similar_ideas = await launch_python(
      pythonPath,
      scriptPath,
      scriptName,
      args
    );
    console.log(similar_ideas[0]);
    let dict = JSON.parse(similar_ideas[0]);
    let search_results = await this.extract_title_and_path_json(dict);
    this.updateView(search_results);
    this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
    this.status.setAttr("title", "Wizard is ready");
  }
  async register_file_change(file, type) {
    const plugin_path = scriptPath_AI;
    let base_name = file.name.split(".md")[0];
    let file_path = this.settings.vaultPath + file.path;
    let storage_path = plugin_path + "/modified_paths.json";
    if (type == "modified" /* modified */) {
      let value = {
        change_type: "modified" /* modified */,
        full_path: file_path,
      };
      append_to_json(storage_path, base_name, value);
    } else if (type == "deleted" /* deleted */) {
      new import_obsidian2.Notice(`${base_name} has been deleted`);
      let value = {
        change_type: "deleted" /* deleted */,
        full_path: file_path,
      };
      append_to_json(storage_path, base_name, value);
    } else if (type == "new" /* new */) {
      console.log(`New File: ${file_path}`);
      if (file_path.contains("Readwise")) {
        new import_obsidian2.Notice(`${base_name} has been created`);
        let value = { change_type: "new" /* new */, full_path: file_path };
        append_to_json(storage_path, base_name, value);
      }
    }
  }
  async index_new_and_modified_files() {
    const plugin_path = scriptPath_AI;
    let storage_path = plugin_path + "/modified_paths.json";
    fs.readFile(storage_path, async (err, data) => {
      if (err) {
        throw err;
      }
      let files_to_modify;
      new import_obsidian2.Notice("Reindexing changed files..");
      this.status.setText("\u{1F9D9}: Knowledge Wizard indexing...");
      this.status.setAttr("title", "Wizard is indexing your vault...");
      try {
        files_to_modify = JSON.parse(data);
        console.log(files_to_modify);
      } catch (e) {
        new import_obsidian2.Notice("No new notes to index");
        this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
        this.status.setAttr("title", "Knowledge Wizard is ready");
        return;
      }
      if (Object.keys(files_to_modify).length < 1) {
        new import_obsidian2.Notice("No new notes to index");
        this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
        this.status.setAttr("title", "Knowledge Wizard is ready");
        return;
      }
      try {
        await this.index_loop(files_to_modify);
      } catch (e) {
        console.log(e.message);
        new import_obsidian2.Notice("There was an error while indexing!");
        this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
        this.status.setAttr("title", "Knowledge Wizard is ready");
        return;
      }
      new import_obsidian2.Notice("Finished indexing!");
      this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
      this.status.setAttr("title", "Knowledge Wizard is ready");
      save_json(storage_path, files_to_modify);
    });
  }
  async index_vault() {
    let files = this.app.vault.getMarkdownFiles();
    let file_paths = {};
    let vault_path = this.settings.vaultPath;
    const plugin_path = scriptPath_AI;
    new import_obsidian2.Notice("Started indexing the full vault!");
    this.status.setText("\u{1F9D9}: Knowledge Wizard indexing...");
    this.status.setAttr("title", "Wizard is indexing your vault...");
    for (let file of files) {
      let lower_case_file_path = file.path.toLowerCase();
      if (
        !(
          lower_case_file_path.includes("projects") ||
          lower_case_file_path.includes("canvas") ||
          lower_case_file_path.includes("resources") ||
          lower_case_file_path.includes("templates") ||
          lower_case_file_path.includes(".jpg")
        )
      ) {
        file_paths[file.basename] = {
          change_type: "new" /* new */,
          full_path: vault_path + file.path,
        };
      }
    }
    console.log(`Files length: ${file_paths.length}`);
    const json_path = plugin_path + "/file_paths.json";
    save_json(json_path, file_paths);
    await this.index_loop(file_paths);
    new import_obsidian2.Notice("Finished indexing!");
    this.status.setText("\u{1F9D9}: Knowledge Wizard ready");
    this.status.setAttr("title", "Knowledge Wizard is ready");
    save_json(json_path, file_paths);
  }
  async index_file(file_path, modification_type, file_name) {
    let note_text = "";
    try {
      note_text = fs.readFileSync(file_path, "utf8");
    } catch (e) {
      if (modification_type == "deleted") {
        note_text = "";
      } else {
        console.log(e.message);
        new import_obsidian2.Notice(`${file_name} can not be read!`);
        throw Error(`${file_name} can not be read!`);
      }
    }
    const res = await fetch(
      "https://pinecone-indexer-xm5lmdnsxq-ey.a.run.app/index",
      {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          file_name,
          note: note_text,
        }),
      }
    );
    const t = await res.text();
    const status = await res.status;
    if (status == 200) {
      new import_obsidian2.Notice(`Indexed Successfully: ${file_name} !`);
    } else {
      new import_obsidian2.Notice(`Server error while indexing ${file_name} `);
      throw Error(`Server error while indexing ${file_name}`);
    }
  }
  async index_loop(files_dict) {
    let counter = 0;
    let number_of_files = Object.entries(files_dict).length;
    for (let [file_name, file_data] of Object.entries(files_dict)) {
      new import_obsidian2.Notice(
        `${counter}/${number_of_files} has been indexed`
      );
      try {
        console.log(file_name);
        new import_obsidian2.Notice(`Indexing: ${file_name}...`);
        await this.index_file(
          file_data["full_path"],
          file_data["change_type"],
          file_name
        );
        counter += 1;
        delete files_dict[file_name];
      } catch (e) {
        console.log(e.message);
        new import_obsidian2.Notice(e.message);
        if (file_data["change_type"] == "deleted") {
          delete files_dict[file_name];
        }
      }
    }
  }
  async extract_title_and_path_json(results) {
    var _a;
    let currnet_filename =
      (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename;
    let search_results = [];
    for (let [note_title, content] of Object.entries(results)) {
      if (note_title.includes("***")) {
        note_title = note_title.split("***")[0];
      }
      let source = note_title;
      if (source == currnet_filename) {
        continue;
      }
      let source_file = await this.get_path_by_name(source);
      if (source_file != null && source != null) {
        let obsidian_path = "obsidian://advanced-uri?vault=";
        obsidian_path = obsidian_path + this.app.vault.getName() + "&filepath=";
        obsidian_path = obsidian_path + source_file.path;
        let result = {};
        result[source] = { source_path: obsidian_path, text: content };
        console.log(`result: ${result[source]["source_path"]}`);
        search_results.push(result);
      }
    }
    return search_results;
  }
  async extract_title_and_path(results) {
    var _a;
    let counter = 0;
    let search_results = {};
    let current_filename =
      (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename;
    console.log(`current filename: ${current_filename}`);
    for (let result of results) {
      if (counter % 3 == 0 && counter != 0) {
        let sentence = '"' + results.at(counter) + '"';
        let source = results.at(counter + 2);
        source = source == null ? void 0 : source.split(":")[1].trim();
        console.log(`counter: ${counter}, This source: ${source}`);
        if (source == current_filename) {
          counter = counter + 1;
          continue;
        }
        let source_file = await this.get_path_by_name(source);
        console.log(source_file);
        if (source_file != null && source != null) {
          let obsidian_path = "obsidian://advanced-uri?vault=";
          obsidian_path =
            obsidian_path + this.app.vault.getName() + "&filepath=";
          obsidian_path = obsidian_path + source_file.path;
          console.log(`my source path: ${obsidian_path}`);
          search_results[source] = {
            source_path: obsidian_path,
            text: sentence,
          };
        }
      }
      counter = counter + 1;
    }
    return search_results;
  }
  async get_path_by_name(source) {
    let all_files = this.app.vault.getMarkdownFiles();
    for (let file of all_files) {
      let filename = file.basename;
      if (filename == source) {
        return file;
      }
    }
    return null;
  }
};
var VCWizardSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your Knowledge Wizard" });
    new import_obsidian2.Setting(containerEl)
      .setName("Obsidian Vault Path")
      .setDesc("The path to the vault where you wish to use the plugin")
      .addText((text) =>
        text
          .setPlaceholder("Enter path")
          .setValue(this.plugin.settings.vaultPath)
          .onChange(async (value) => {
            console.log("path: " + value);
            this.plugin.settings.vaultPath = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("OpenAI API Key")
      .setDesc("Your OpenAI API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.openAIKey)
          .onChange(async (value) => {
            console.log("Open AI key: " + value);
            this.plugin.settings.openAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("Python Virtual Environment Path")
      .setDesc("The path to python virtual environment")
      .addText((text) =>
        text
          .setPlaceholder("Enter path")
          .setValue(this.plugin.settings.pythonPath)
          .onChange(async (value) => {
            console.log("PythonPath: " + value);
            this.plugin.settings.pythonPath = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("Pinecone API Key")
      .setDesc("Your Pinecone API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.pineconeKey)
          .onChange(async (value) => {
            console.log("Pinecone key: " + value);
            this.plugin.settings.pineconeKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("Pinecone Index Name")
      .setDesc("Your Pinecone Index Name")
      .addText((text) =>
        text
          .setPlaceholder("Enter name")
          .setValue(this.plugin.settings.pineconeIndexName)
          .onChange(async (value) => {
            console.log("Pinecone Index Name: " + value);
            this.plugin.settings.pineconeIndexName = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("Pinecone Envrionment Name")
      .setDesc("e.g: us-east1-gcp")
      .addText((text) =>
        text
          .setPlaceholder("Enter environment")
          .setValue(this.plugin.settings.pineconeEnv)
          .onChange(async (value) => {
            console.log("Pinecone Envrionment Name: " + value);
            this.plugin.settings.pineconeEnv = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian2.Setting(containerEl)
      .setName("Number of sub-links to read for URL Research")
      .setDesc("default is 6")
      .addText((text) =>
        text
          .setPlaceholder("6")
          .setValue(this.plugin.settings.links_num)
          .onChange(async (value) => {
            this.plugin.settings.links_num = value;
            await this.plugin.saveSettings();
          })
      );
  }
};
var DEFAULT_SETTINGS = {
  vaultPath: "default",
  openAIKey: "default",
  pineconeKey: "default",
  pineconeIndexName: "default",
  pineconeEnv: "us-east1-gcp",
  pythonPath: "<path-to-virtual-env>",
  links_num: "6",
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2Jhc2UuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2NvbW1vbi5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvYXBpLmpzIiwgIm5vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL2Jyb3dzZXIuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2NvbmZpZ3VyYXRpb24uanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9weXRob24tc2hlbGwvaW5kZXgudHMiLCAibWFpbi50cyIsICJ2aWV3LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IFVSTFNlYXJjaFBhcmFtc10nO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9lbmhhbmNlRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwgIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjMuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVxdWlyZWRFcnJvciA9IGV4cG9ydHMuQmFzZUFQSSA9IGV4cG9ydHMuQ09MTEVDVElPTl9GT1JNQVRTID0gZXhwb3J0cy5CQVNFX1BBVEggPSB2b2lkIDA7XG5jb25zdCBheGlvc18xID0gcmVxdWlyZShcImF4aW9zXCIpO1xuZXhwb3J0cy5CQVNFX1BBVEggPSBcImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjFcIi5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IHtcbiAgICBjc3Y6IFwiLFwiLFxuICAgIHNzdjogXCIgXCIsXG4gICAgdHN2OiBcIlxcdFwiLFxuICAgIHBpcGVzOiBcInxcIixcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQmFzZUFQSVxuICovXG5jbGFzcyBCYXNlQVBJIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uLCBiYXNlUGF0aCA9IGV4cG9ydHMuQkFTRV9QQVRILCBheGlvcyA9IGF4aW9zXzEuZGVmYXVsdCkge1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcztcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCB8fCB0aGlzLmJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5CYXNlQVBJID0gQmFzZUFQSTtcbjtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBSZXF1aXJlZEVycm9yXG4gKiBAZXh0ZW5kcyB7RXJyb3J9XG4gKi9cbmNsYXNzIFJlcXVpcmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZmllbGQsIG1zZykge1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUmVxdWlyZWRFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWlyZWRFcnJvciA9IFJlcXVpcmVkRXJyb3I7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogT3BlbkFJIEFQSVxuICogQVBJcyBmb3Igc2FtcGxpbmcgZnJvbSBhbmQgZmluZS10dW5pbmcgbGFuZ3VhZ2UgbW9kZWxzXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDEuMy4wXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbiA9IGV4cG9ydHMudG9QYXRoU3RyaW5nID0gZXhwb3J0cy5zZXJpYWxpemVEYXRhSWZOZWVkZWQgPSBleHBvcnRzLnNldFNlYXJjaFBhcmFtcyA9IGV4cG9ydHMuc2V0T0F1dGhUb09iamVjdCA9IGV4cG9ydHMuc2V0QmVhcmVyQXV0aFRvT2JqZWN0ID0gZXhwb3J0cy5zZXRCYXNpY0F1dGhUb09iamVjdCA9IGV4cG9ydHMuc2V0QXBpS2V5VG9PYmplY3QgPSBleHBvcnRzLmFzc2VydFBhcmFtRXhpc3RzID0gZXhwb3J0cy5EVU1NWV9CQVNFX1VSTCA9IHZvaWQgMDtcbmNvbnN0IGJhc2VfMSA9IHJlcXVpcmUoXCIuL2Jhc2VcIik7XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuRFVNTVlfQkFTRV9VUkwgPSAnaHR0cHM6Ly9leGFtcGxlLmNvbSc7XG4vKipcbiAqXG4gKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLmFzc2VydFBhcmFtRXhpc3RzID0gZnVuY3Rpb24gKGZ1bmN0aW9uTmFtZSwgcGFyYW1OYW1lLCBwYXJhbVZhbHVlKSB7XG4gICAgaWYgKHBhcmFtVmFsdWUgPT09IG51bGwgfHwgcGFyYW1WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBiYXNlXzEuUmVxdWlyZWRFcnJvcihwYXJhbU5hbWUsIGBSZXF1aXJlZCBwYXJhbWV0ZXIgJHtwYXJhbU5hbWV9IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgJHtmdW5jdGlvbk5hbWV9LmApO1xuICAgIH1cbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2V0QXBpS2V5VG9PYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXlQYXJhbU5hbWUsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8geWllbGQgY29uZmlndXJhdGlvbi5hcGlLZXkoa2V5UGFyYW1OYW1lKVxuICAgICAgICAgICAgICAgIDogeWllbGQgY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICBvYmplY3Rba2V5UGFyYW1OYW1lXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2V0QmFzaWNBdXRoVG9PYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0LCBjb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgKGNvbmZpZ3VyYXRpb24udXNlcm5hbWUgfHwgY29uZmlndXJhdGlvbi5wYXNzd29yZCkpIHtcbiAgICAgICAgb2JqZWN0W1wiYXV0aFwiXSA9IHsgdXNlcm5hbWU6IGNvbmZpZ3VyYXRpb24udXNlcm5hbWUsIHBhc3N3b3JkOiBjb25maWd1cmF0aW9uLnBhc3N3b3JkIH07XG4gICAgfVxufTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5zZXRCZWFyZXJBdXRoVG9PYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0LCBjb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8geWllbGQgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbigpXG4gICAgICAgICAgICAgICAgOiB5aWVsZCBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgb2JqZWN0W1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgYWNjZXNzVG9rZW47XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2V0T0F1dGhUb09iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHNjb3BlcywgY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQWNjZXNzVG9rZW5WYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyB5aWVsZCBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuKG5hbWUsIHNjb3BlcylcbiAgICAgICAgICAgICAgICA6IHlpZWxkIGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW47XG4gICAgICAgICAgICBvYmplY3RbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyBsb2NhbFZhckFjY2Vzc1Rva2VuVmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5mdW5jdGlvbiBzZXRGbGF0dGVuZWRRdWVyeVBhcmFtcyh1cmxTZWFyY2hQYXJhbXMsIHBhcmFtZXRlciwga2V5ID0gXCJcIikge1xuICAgIGlmIChwYXJhbWV0ZXIgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtZXRlcikpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlci5mb3JFYWNoKGl0ZW0gPT4gc2V0RmxhdHRlbmVkUXVlcnlQYXJhbXModXJsU2VhcmNoUGFyYW1zLCBpdGVtLCBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcikuZm9yRWFjaChjdXJyZW50S2V5ID0+IHNldEZsYXR0ZW5lZFF1ZXJ5UGFyYW1zKHVybFNlYXJjaFBhcmFtcywgcGFyYW1ldGVyW2N1cnJlbnRLZXldLCBgJHtrZXl9JHtrZXkgIT09ICcnID8gJy4nIDogJyd9JHtjdXJyZW50S2V5fWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHVybFNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cmxTZWFyY2hQYXJhbXMuc2V0KGtleSwgcGFyYW1ldGVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5zZXRTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAodXJsLCAuLi5vYmplY3RzKSB7XG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmwuc2VhcmNoKTtcbiAgICBzZXRGbGF0dGVuZWRRdWVyeVBhcmFtcyhzZWFyY2hQYXJhbXMsIG9iamVjdHMpO1xuICAgIHVybC5zZWFyY2ggPSBzZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2VyaWFsaXplRGF0YUlmTmVlZGVkID0gZnVuY3Rpb24gKHZhbHVlLCByZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbikge1xuICAgIGNvbnN0IG5vblN0cmluZyA9IHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZyc7XG4gICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gbm9uU3RyaW5nICYmIGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5pc0pzb25NaW1lXG4gICAgICAgID8gY29uZmlndXJhdGlvbi5pc0pzb25NaW1lKHJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKVxuICAgICAgICA6IG5vblN0cmluZztcbiAgICByZXR1cm4gbmVlZHNTZXJpYWxpemF0aW9uXG4gICAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pXG4gICAgICAgIDogKHZhbHVlIHx8IFwiXCIpO1xufTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy50b1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgcmV0dXJuIHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDtcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uID0gZnVuY3Rpb24gKGF4aW9zQXJncywgZ2xvYmFsQXhpb3MsIEJBU0VfUEFUSCwgY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiAoYXhpb3MgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGggPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXhpb3NBcmdzLm9wdGlvbnMpLCB7IHVybDogKChjb25maWd1cmF0aW9uID09PSBudWxsIHx8IGNvbmZpZ3VyYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZ3VyYXRpb24uYmFzZVBhdGgpIHx8IGJhc2VQYXRoKSArIGF4aW9zQXJncy51cmwgfSk7XG4gICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgIH07XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjMuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGVuQUlBcGkgPSBleHBvcnRzLk9wZW5BSUFwaUZhY3RvcnkgPSBleHBvcnRzLk9wZW5BSUFwaUZwID0gZXhwb3J0cy5PcGVuQUlBcGlBeGlvc1BhcmFtQ3JlYXRvciA9IGV4cG9ydHMuQ3JlYXRlSW1hZ2VSZXF1ZXN0UmVzcG9uc2VGb3JtYXRFbnVtID0gZXhwb3J0cy5DcmVhdGVJbWFnZVJlcXVlc3RTaXplRW51bSA9IGV4cG9ydHMuQ2hhdENvbXBsZXRpb25SZXNwb25zZU1lc3NhZ2VSb2xlRW51bSA9IGV4cG9ydHMuQ2hhdENvbXBsZXRpb25SZXF1ZXN0TWVzc2FnZVJvbGVFbnVtID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbi8vIFNvbWUgaW1wb3J0cyBub3QgdXNlZCBkZXBlbmRpbmcgb24gdGVtcGxhdGUgY29uZGl0aW9uc1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xuZXhwb3J0cy5DaGF0Q29tcGxldGlvblJlcXVlc3RNZXNzYWdlUm9sZUVudW0gPSB7XG4gICAgU3lzdGVtOiAnc3lzdGVtJyxcbiAgICBVc2VyOiAndXNlcicsXG4gICAgQXNzaXN0YW50OiAnYXNzaXN0YW50JyxcbiAgICBGdW5jdGlvbjogJ2Z1bmN0aW9uJ1xufTtcbmV4cG9ydHMuQ2hhdENvbXBsZXRpb25SZXNwb25zZU1lc3NhZ2VSb2xlRW51bSA9IHtcbiAgICBTeXN0ZW06ICdzeXN0ZW0nLFxuICAgIFVzZXI6ICd1c2VyJyxcbiAgICBBc3Npc3RhbnQ6ICdhc3Npc3RhbnQnLFxuICAgIEZ1bmN0aW9uOiAnZnVuY3Rpb24nXG59O1xuZXhwb3J0cy5DcmVhdGVJbWFnZVJlcXVlc3RTaXplRW51bSA9IHtcbiAgICBfMjU2eDI1NjogJzI1NngyNTYnLFxuICAgIF81MTJ4NTEyOiAnNTEyeDUxMicsXG4gICAgXzEwMjR4MTAyNDogJzEwMjR4MTAyNCdcbn07XG5leHBvcnRzLkNyZWF0ZUltYWdlUmVxdWVzdFJlc3BvbnNlRm9ybWF0RW51bSA9IHtcbiAgICBVcmw6ICd1cmwnLFxuICAgIEI2NEpzb246ICdiNjRfanNvbidcbn07XG4vKipcbiAqIE9wZW5BSUFwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuT3BlbkFJQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBJbW1lZGlhdGVseSBjYW5jZWwgYSBmaW5lLXR1bmUgam9iLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gY2FuY2VsXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjYW5jZWxGaW5lVHVuZTogKGZpbmVUdW5lSWQsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmluZVR1bmVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY2FuY2VsRmluZVR1bmUnLCAnZmluZVR1bmVJZCcsIGZpbmVUdW5lSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maW5lLXR1bmVzL3tmaW5lX3R1bmVfaWR9L2NhbmNlbGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJmaW5lX3R1bmVfaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhmaW5lVHVuZUlkKSkpO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEFuc3dlcnMgdGhlIHNwZWNpZmllZCBxdWVzdGlvbiB1c2luZyB0aGUgcHJvdmlkZWQgZG9jdW1lbnRzIGFuZCBleGFtcGxlcy4gIFRoZSBlbmRwb2ludCBmaXJzdCBbc2VhcmNoZXNdKC9kb2NzL2FwaS1yZWZlcmVuY2Uvc2VhcmNoZXMpIG92ZXIgcHJvdmlkZWQgZG9jdW1lbnRzIG9yIGZpbGVzIHRvIGZpbmQgcmVsZXZhbnQgY29udGV4dC4gVGhlIHJlbGV2YW50IGNvbnRleHQgaXMgY29tYmluZWQgd2l0aCB0aGUgcHJvdmlkZWQgZXhhbXBsZXMgYW5kIHF1ZXN0aW9uIHRvIGNyZWF0ZSB0aGUgcHJvbXB0IGZvciBbY29tcGxldGlvbl0oL2RvY3MvYXBpLXJlZmVyZW5jZS9jb21wbGV0aW9ucykuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQW5zd2VyUmVxdWVzdH0gY3JlYXRlQW5zd2VyUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQW5zd2VyOiAoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVBbnN3ZXJSZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVBbnN3ZXInLCAnY3JlYXRlQW5zd2VyUmVxdWVzdCcsIGNyZWF0ZUFuc3dlclJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hbnN3ZXJzYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlQW5zd2VyUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbW9kZWwgcmVzcG9uc2UgZm9yIHRoZSBnaXZlbiBjaGF0IGNvbnZlcnNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3R9IGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2hhdENvbXBsZXRpb246IChjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVDaGF0Q29tcGxldGlvbicsICdjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QnLCBjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9jaGF0L2NvbXBsZXRpb25zYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3R9IGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2xhc3NpZmljYXRpb246IChjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVDbGFzc2lmaWNhdGlvbicsICdjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QnLCBjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9jbGFzc2lmaWNhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQ29tcGxldGlvblJlcXVlc3R9IGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDb21wbGV0aW9uOiAoY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQ29tcGxldGlvblJlcXVlc3QnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUNvbXBsZXRpb24nLCAnY3JlYXRlQ29tcGxldGlvblJlcXVlc3QnLCBjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2NvbXBsZXRpb25zYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBlZGl0IGZvciB0aGUgcHJvdmlkZWQgaW5wdXQsIGluc3RydWN0aW9uLCBhbmQgcGFyYW1ldGVycy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVFZGl0UmVxdWVzdH0gY3JlYXRlRWRpdFJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUVkaXQ6IChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVFZGl0UmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlRWRpdCcsICdjcmVhdGVFZGl0UmVxdWVzdCcsIGNyZWF0ZUVkaXRSZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZWRpdHNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVFZGl0UmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUVtYmVkZGluZ1JlcXVlc3R9IGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUVtYmVkZGluZzogKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlRW1iZWRkaW5nJywgJ2NyZWF0ZUVtYmVkZGluZ1JlcXVlc3QnLCBjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZW1iZWRkaW5nc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVXBsb2FkIGEgZmlsZSB0aGF0IGNvbnRhaW5zIGRvY3VtZW50KHMpIHRvIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzL2ZlYXR1cmVzLiBDdXJyZW50bHksIHRoZSBzaXplIG9mIGFsbCB0aGUgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXAgdG8gMSBHQi4gUGxlYXNlIGNvbnRhY3QgdXMgaWYgeW91IG5lZWQgdG8gaW5jcmVhc2UgdGhlIHN0b3JhZ2UgbGltaXQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBOYW1lIG9mIHRoZSBbSlNPTiBMaW5lc10oaHR0cHM6Ly9qc29ubGluZXMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LykgZmlsZSB0byBiZSB1cGxvYWRlZC4gIElmIHRoZSAmI3g2MDtwdXJwb3NlJiN4NjA7IGlzIHNldCB0byBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDssIGVhY2ggbGluZSBpcyBhIEpTT04gcmVjb3JkIHdpdGggXFxcXFxcJnF1b3Q7cHJvbXB0XFxcXFxcJnF1b3Q7IGFuZCBcXFxcXFwmcXVvdDtjb21wbGV0aW9uXFxcXFxcJnF1b3Q7IGZpZWxkcyByZXByZXNlbnRpbmcgeW91ciBbdHJhaW5pbmcgZXhhbXBsZXNdKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZy9wcmVwYXJlLXRyYWluaW5nLWRhdGEpLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHVycG9zZSBUaGUgaW50ZW5kZWQgcHVycG9zZSBvZiB0aGUgdXBsb2FkZWQgZG9jdW1lbnRzLiAgVXNlIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OyBmb3IgW0ZpbmUtdHVuaW5nXSgvZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuZXMpLiBUaGlzIGFsbG93cyB1cyB0byB2YWxpZGF0ZSB0aGUgZm9ybWF0IG9mIHRoZSB1cGxvYWRlZCBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRmlsZTogKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlRmlsZScsICdmaWxlJywgZmlsZSk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdwdXJwb3NlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVGaWxlJywgJ3B1cnBvc2UnLCBwdXJwb3NlKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmlsZXNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyRm9ybVBhcmFtcyA9IG5ldyAoKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5mb3JtRGF0YUN0b3IpIHx8IEZvcm1EYXRhKSgpO1xuICAgICAgICAgICAgaWYgKGZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwdXJwb3NlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdwdXJwb3NlJywgcHVycG9zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBsb2NhbFZhckZvcm1QYXJhbXMuZ2V0SGVhZGVycygpKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBsb2NhbFZhckZvcm1QYXJhbXM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgam9iIHRoYXQgZmluZS10dW5lcyBhIHNwZWNpZmllZCBtb2RlbCBmcm9tIGEgZ2l2ZW4gZGF0YXNldC4gIFJlc3BvbnNlIGluY2x1ZGVzIGRldGFpbHMgb2YgdGhlIGVucXVldWVkIGpvYiBpbmNsdWRpbmcgam9iIHN0YXR1cyBhbmQgdGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUZpbmVUdW5lUmVxdWVzdH0gY3JlYXRlRmluZVR1bmVSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVGaW5lVHVuZTogKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVGaW5lVHVuZVJlcXVlc3QnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUZpbmVUdW5lJywgJ2NyZWF0ZUZpbmVUdW5lUmVxdWVzdCcsIGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ZpbmUtdHVuZXNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVGaW5lVHVuZVJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBpbWFnZSBnaXZlbiBhIHByb21wdC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVJbWFnZVJlcXVlc3R9IGNyZWF0ZUltYWdlUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2U6IChjcmVhdGVJbWFnZVJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlSW1hZ2VSZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVJbWFnZScsICdjcmVhdGVJbWFnZVJlcXVlc3QnLCBjcmVhdGVJbWFnZVJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9pbWFnZXMvZ2VuZXJhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVJbWFnZVJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byBlZGl0LiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuIElmIG1hc2sgaXMgbm90IHByb3ZpZGVkLCBpbWFnZSBtdXN0IGhhdmUgdHJhbnNwYXJlbmN5LCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgdGhlIG1hc2suXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgQSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZXNpcmVkIGltYWdlKHMpLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMTAwMCBjaGFyYWN0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IFttYXNrXSBBbiBhZGRpdGlvbmFsIGltYWdlIHdob3NlIGZ1bGx5IHRyYW5zcGFyZW50IGFyZWFzIChlLmcuIHdoZXJlIGFscGhhIGlzIHplcm8pIGluZGljYXRlIHdoZXJlICYjeDYwO2ltYWdlJiN4NjA7IHNob3VsZCBiZSBlZGl0ZWQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBhcyAmI3g2MDtpbWFnZSYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlRWRpdDogKGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ltYWdlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVJbWFnZUVkaXQnLCAnaW1hZ2UnLCBpbWFnZSk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdwcm9tcHQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUltYWdlRWRpdCcsICdwcm9tcHQnLCBwcm9tcHQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9pbWFnZXMvZWRpdHNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyRm9ybVBhcmFtcyA9IG5ldyAoKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5mb3JtRGF0YUN0b3IpIHx8IEZvcm1EYXRhKSgpO1xuICAgICAgICAgICAgaWYgKGltYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdpbWFnZScsIGltYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdtYXNrJywgbWFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvbXB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdwcm9tcHQnLCBwcm9tcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ24nLCBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdzaXplJywgc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3Jlc3BvbnNlX2Zvcm1hdCcsIHJlc3BvbnNlRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1c2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCd1c2VyJywgdXNlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBsb2NhbFZhckZvcm1QYXJhbXMuZ2V0SGVhZGVycygpKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBsb2NhbFZhckZvcm1QYXJhbXM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZSBhcyB0aGUgYmFzaXMgZm9yIHRoZSB2YXJpYXRpb24ocykuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlVmFyaWF0aW9uOiAoaW1hZ2UsIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ltYWdlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVJbWFnZVZhcmlhdGlvbicsICdpbWFnZScsIGltYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvaW1hZ2VzL3ZhcmlhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyRm9ybVBhcmFtcyA9IG5ldyAoKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5mb3JtRGF0YUN0b3IpIHx8IEZvcm1EYXRhKSgpO1xuICAgICAgICAgICAgaWYgKGltYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdpbWFnZScsIGltYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCduJywgbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnc2l6ZScsIHNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdyZXNwb25zZV9mb3JtYXQnLCByZXNwb25zZUZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgndXNlcicsIHVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ211bHRpcGFydC9mb3JtLWRhdGEnO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgbG9jYWxWYXJGb3JtUGFyYW1zLmdldEhlYWRlcnMoKSksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gbG9jYWxWYXJGb3JtUGFyYW1zO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyBpZiB0ZXh0IHZpb2xhdGVzIE9wZW5BSVxcJ3MgQ29udGVudCBQb2xpY3lcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVNb2RlcmF0aW9uUmVxdWVzdH0gY3JlYXRlTW9kZXJhdGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZU1vZGVyYXRpb246IChjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlTW9kZXJhdGlvbicsICdjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCcsIGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvbW9kZXJhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBUaGUgc2VhcmNoIGVuZHBvaW50IGNvbXB1dGVzIHNpbWlsYXJpdHkgc2NvcmVzIGJldHdlZW4gcHJvdmlkZWQgcXVlcnkgYW5kIGRvY3VtZW50cy4gRG9jdW1lbnRzIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIEFQSSBpZiB0aGVyZSBhcmUgbm8gbW9yZSB0aGFuIDIwMCBvZiB0aGVtLiAgVG8gZ28gYmV5b25kIHRoZSAyMDAgZG9jdW1lbnQgbGltaXQsIGRvY3VtZW50cyBjYW4gYmUgcHJvY2Vzc2VkIG9mZmxpbmUgYW5kIHRoZW4gdXNlZCBmb3IgZWZmaWNpZW50IHJldHJpZXZhbCBhdCBxdWVyeSB0aW1lLiBXaGVuIGBmaWxlYCBpcyBzZXQsIHRoZSBzZWFyY2ggZW5kcG9pbnQgc2VhcmNoZXMgb3ZlciBhbGwgdGhlIGRvY3VtZW50cyBpbiB0aGUgZ2l2ZW4gZmlsZSBhbmQgcmV0dXJucyB1cCB0byB0aGUgYG1heF9yZXJhbmtgIG51bWJlciBvZiBkb2N1bWVudHMuIFRoZXNlIGRvY3VtZW50cyB3aWxsIGJlIHJldHVybmVkIGFsb25nIHdpdGggdGhlaXIgc2VhcmNoIHNjb3Jlcy4gIFRoZSBzaW1pbGFyaXR5IHNjb3JlIGlzIGEgcG9zaXRpdmUgc2NvcmUgdGhhdCB1c3VhbGx5IHJhbmdlcyBmcm9tIDAgdG8gMzAwIChidXQgY2FuIHNvbWV0aW1lcyBnbyBoaWdoZXIpLCB3aGVyZSBhIHNjb3JlIGFib3ZlIDIwMCB1c3VhbGx5IG1lYW5zIHRoZSBkb2N1bWVudCBpcyBzZW1hbnRpY2FsbHkgc2ltaWxhciB0byB0aGUgcXVlcnkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmVJZCBUaGUgSUQgb2YgdGhlIGVuZ2luZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdC4gIFlvdSBjYW4gc2VsZWN0IG9uZSBvZiAmI3g2MDthZGEmI3g2MDssICYjeDYwO2JhYmJhZ2UmI3g2MDssICYjeDYwO2N1cmllJiN4NjA7LCBvciAmI3g2MDtkYXZpbmNpJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZVNlYXJjaFJlcXVlc3R9IGNyZWF0ZVNlYXJjaFJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVNlYXJjaDogKGVuZ2luZUlkLCBjcmVhdGVTZWFyY2hSZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2VuZ2luZUlkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVTZWFyY2gnLCAnZW5naW5lSWQnLCBlbmdpbmVJZCk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVTZWFyY2hSZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVTZWFyY2gnLCAnY3JlYXRlU2VhcmNoUmVxdWVzdCcsIGNyZWF0ZVNlYXJjaFJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9lbmdpbmVzL3tlbmdpbmVfaWR9L3NlYXJjaGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJlbmdpbmVfaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhlbmdpbmVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlU2VhcmNoUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBUcmFuc2NyaWJlcyBhdWRpbyBpbnRvIHRoZSBpbnB1dCBsYW5ndWFnZS5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIFRoZSBhdWRpbyBmaWxlIG9iamVjdCAobm90IGZpbGUgbmFtZSkgdG8gdHJhbnNjcmliZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgbWF0Y2ggdGhlIGF1ZGlvIGxhbmd1YWdlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGVtcGVyYXR1cmVdIFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZSwgYmV0d2VlbiAwIGFuZCAxLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGwgbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmUgZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy4gSWYgc2V0IHRvIDAsIHRoZSBtb2RlbCB3aWxsIHVzZSBbbG9nIHByb2JhYmlsaXR5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb2dfcHJvYmFiaWxpdHkpIHRvIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2UgdGhlIHRlbXBlcmF0dXJlIHVudGlsIGNlcnRhaW4gdGhyZXNob2xkcyBhcmUgaGl0LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlXSBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluIFtJU08tNjM5LTFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfSVNPXzYzOS0xX2NvZGVzKSBmb3JtYXQgd2lsbCBpbXByb3ZlIGFjY3VyYWN5IGFuZCBsYXRlbmN5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlVHJhbnNjcmlwdGlvbjogKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlVHJhbnNjcmlwdGlvbicsICdmaWxlJywgZmlsZSk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdtb2RlbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlVHJhbnNjcmlwdGlvbicsICdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXVkaW8vdHJhbnNjcmlwdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyRm9ybVBhcmFtcyA9IG5ldyAoKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5mb3JtRGF0YUN0b3IpIHx8IEZvcm1EYXRhKSgpO1xuICAgICAgICAgICAgaWYgKGZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnbW9kZWwnLCBtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvbXB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdwcm9tcHQnLCBwcm9tcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdyZXNwb25zZV9mb3JtYXQnLCByZXNwb25zZUZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGVtcGVyYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3RlbXBlcmF0dXJlJywgdGVtcGVyYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhbmd1YWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdsYW5ndWFnZScsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGxvY2FsVmFyRm9ybVBhcmFtcy5nZXRIZWFkZXJzKCkpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGxvY2FsVmFyRm9ybVBhcmFtcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zbGF0ZXMgYXVkaW8gaW50byBpbnRvIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSBvYmplY3QgKG5vdCBmaWxlIG5hbWUpIHRyYW5zbGF0ZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgYmUgaW4gRW5nbGlzaC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBvZiB0aGUgdHJhbnNjcmlwdCBvdXRwdXQsIGluIG9uZSBvZiB0aGVzZSBvcHRpb25zOiBqc29uLCB0ZXh0LCBzcnQsIHZlcmJvc2VfanNvbiwgb3IgdnR0LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RlbXBlcmF0dXJlXSBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUsIGJldHdlZW4gMCBhbmQgMS4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIElmIHNldCB0byAwLCB0aGUgbW9kZWwgd2lsbCB1c2UgW2xvZyBwcm9iYWJpbGl0eV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9nX3Byb2JhYmlsaXR5KSB0byBhdXRvbWF0aWNhbGx5IGluY3JlYXNlIHRoZSB0ZW1wZXJhdHVyZSB1bnRpbCBjZXJ0YWluIHRocmVzaG9sZHMgYXJlIGhpdC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVRyYW5zbGF0aW9uOiAoZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGUnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZVRyYW5zbGF0aW9uJywgJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ21vZGVsJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVUcmFuc2xhdGlvbicsICdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXVkaW8vdHJhbnNsYXRpb25zYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckZvcm1QYXJhbXMgPSBuZXcgKChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uZm9ybURhdGFDdG9yKSB8fCBGb3JtRGF0YSkoKTtcbiAgICAgICAgICAgIGlmIChmaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdmaWxlJywgZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ21vZGVsJywgbW9kZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb21wdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgncHJvbXB0JywgcHJvbXB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZUZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgncmVzcG9uc2VfZm9ybWF0JywgcmVzcG9uc2VGb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRlbXBlcmF0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCd0ZW1wZXJhdHVyZScsIHRlbXBlcmF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGxvY2FsVmFyRm9ybVBhcmFtcy5nZXRIZWFkZXJzKCkpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGxvY2FsVmFyRm9ybVBhcmFtcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVGaWxlOiAoZmlsZUlkLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnZGVsZXRlRmlsZScsICdmaWxlSWQnLCBmaWxlSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maWxlcy97ZmlsZV9pZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmlsZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbGVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnREVMRVRFJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBUaGUgbW9kZWwgdG8gZGVsZXRlXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVNb2RlbDogKG1vZGVsLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ21vZGVsJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdkZWxldGVNb2RlbCcsICdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvbW9kZWxzL3ttb2RlbH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wibW9kZWxcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhtb2RlbCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnREVMRVRFJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZG93bmxvYWRGaWxlOiAoZmlsZUlkLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnZG93bmxvYWRGaWxlJywgJ2ZpbGVJZCcsIGZpbGVJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ZpbGVzL3tmaWxlX2lkfS9jb250ZW50YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbGVfaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhmaWxlSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSAobm9uLWZpbmV0dW5lZCkgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RFbmdpbmVzOiAob3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2VuZ2luZXNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgZmlsZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHVzZXJcXCdzIG9yZ2FuaXphdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaWxlczogKG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maWxlc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBHZXQgZmluZS1ncmFpbmVkIHN0YXR1cyB1cGRhdGVzIGZvciBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBnZXQgZXZlbnRzIGZvci5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbc3RyZWFtXSBXaGV0aGVyIHRvIHN0cmVhbSBldmVudHMgZm9yIHRoZSBmaW5lLXR1bmUgam9iLiBJZiBzZXQgdG8gdHJ1ZSwgZXZlbnRzIHdpbGwgYmUgc2VudCBhcyBkYXRhLW9ubHkgW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdCkgYXMgdGhleSBiZWNvbWUgYXZhaWxhYmxlLiBUaGUgc3RyZWFtIHdpbGwgdGVybWluYXRlIHdpdGggYSAmI3g2MDtkYXRhOiBbRE9ORV0mI3g2MDsgbWVzc2FnZSB3aGVuIHRoZSBqb2IgaXMgZmluaXNoZWQgKHN1Y2NlZWRlZCwgY2FuY2VsbGVkLCBvciBmYWlsZWQpLiAgSWYgc2V0IHRvIGZhbHNlLCBvbmx5IGV2ZW50cyBnZW5lcmF0ZWQgc28gZmFyIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RmluZVR1bmVFdmVudHM6IChmaW5lVHVuZUlkLCBzdHJlYW0sIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmluZVR1bmVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnbGlzdEZpbmVUdW5lRXZlbnRzJywgJ2ZpbmVUdW5lSWQnLCBmaW5lVHVuZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmluZS10dW5lcy97ZmluZV90dW5lX2lkfS9ldmVudHNgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmluZV90dW5lX2lkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmluZVR1bmVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGlmIChzdHJlYW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ3N0cmVhbSddID0gc3RyZWFtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdCB5b3VyIG9yZ2FuaXphdGlvblxcJ3MgZmluZS10dW5pbmcgam9ic1xuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbmVUdW5lczogKG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maW5lLXR1bmVzYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0TW9kZWxzOiAob3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL21vZGVsc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGl0IHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmVJZCBUaGUgSUQgb2YgdGhlIGVuZ2luZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVFbmdpbmU6IChlbmdpbmVJZCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdlbmdpbmVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygncmV0cmlldmVFbmdpbmUnLCAnZW5naW5lSWQnLCBlbmdpbmVJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2VuZ2luZXMve2VuZ2luZV9pZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZW5naW5lX2lkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZW5naW5lSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmlsZTogKGZpbGVJZCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ3JldHJpZXZlRmlsZScsICdmaWxlSWQnLCBmaWxlSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maWxlcy97ZmlsZV9pZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmlsZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbGVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgaW5mbyBhYm91dCB0aGUgZmluZS10dW5lIGpvYi4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVGaW5lVHVuZTogKGZpbmVUdW5lSWQsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmluZVR1bmVJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygncmV0cmlldmVGaW5lVHVuZScsICdmaW5lVHVuZUlkJywgZmluZVR1bmVJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ZpbmUtdHVuZXMve2ZpbmVfdHVuZV9pZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmluZV90dW5lX2lkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmluZVR1bmVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZGVsIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBwZXJtaXNzaW9uaW5nLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIElEIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVNb2RlbDogKG1vZGVsLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ21vZGVsJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdyZXRyaWV2ZU1vZGVsJywgJ21vZGVsJywgbW9kZWwpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9tb2RlbHMve21vZGVsfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJtb2RlbFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKG1vZGVsKSkpO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgIH07XG59O1xuLyoqXG4gKiBPcGVuQUlBcGkgLSBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLk9wZW5BSUFwaUZwID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yID0gZXhwb3J0cy5PcGVuQUlBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbmVUdW5lSWQgVGhlIElEIG9mIHRoZSBmaW5lLXR1bmUgam9iIHRvIGNhbmNlbFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsRmluZVR1bmUoZmluZVR1bmVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY2FuY2VsRmluZVR1bmUoZmluZVR1bmVJZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQW5zd2VycyB0aGUgc3BlY2lmaWVkIHF1ZXN0aW9uIHVzaW5nIHRoZSBwcm92aWRlZCBkb2N1bWVudHMgYW5kIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciBwcm92aWRlZCBkb2N1bWVudHMgb3IgZmlsZXMgdG8gZmluZCByZWxldmFudCBjb250ZXh0LiBUaGUgcmVsZXZhbnQgY29udGV4dCBpcyBjb21iaW5lZCB3aXRoIHRoZSBwcm92aWRlZCBleGFtcGxlcyBhbmQgcXVlc3Rpb24gdG8gY3JlYXRlIHRoZSBwcm9tcHQgZm9yIFtjb21wbGV0aW9uXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKS5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBbnN3ZXJSZXF1ZXN0fSBjcmVhdGVBbnN3ZXJSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVBbnN3ZXIoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlQW5zd2VyKGNyZWF0ZUFuc3dlclJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBtb2RlbCByZXNwb25zZSBmb3IgdGhlIGdpdmVuIGNoYXQgY29udmVyc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUNoYXRDb21wbGV0aW9uKGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyB0aGUgc3BlY2lmaWVkIGBxdWVyeWAgdXNpbmcgcHJvdmlkZWQgZXhhbXBsZXMuICBUaGUgZW5kcG9pbnQgZmlyc3QgW3NlYXJjaGVzXSgvZG9jcy9hcGktcmVmZXJlbmNlL3NlYXJjaGVzKSBvdmVyIHRoZSBsYWJlbGVkIGV4YW1wbGVzIHRvIHNlbGVjdCB0aGUgb25lcyBtb3N0IHJlbGV2YW50IGZvciB0aGUgcGFydGljdWxhciBxdWVyeS4gVGhlbiwgdGhlIHJlbGV2YW50IGV4YW1wbGVzIGFyZSBjb21iaW5lZCB3aXRoIHRoZSBxdWVyeSB0byBjb25zdHJ1Y3QgYSBwcm9tcHQgdG8gcHJvZHVjZSB0aGUgZmluYWwgbGFiZWwgdmlhIHRoZSBbY29tcGxldGlvbnNdKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29tcGxldGlvbnMpIGVuZHBvaW50LiAgTGFiZWxlZCBleGFtcGxlcyBjYW4gYmUgcHJvdmlkZWQgdmlhIGFuIHVwbG9hZGVkIGBmaWxlYCwgb3IgZXhwbGljaXRseSBsaXN0ZWQgaW4gdGhlIHJlcXVlc3QgdXNpbmcgdGhlIGBleGFtcGxlc2AgcGFyYW1ldGVyIGZvciBxdWljayB0ZXN0cyBhbmQgc21hbGwgc2NhbGUgdXNlIGNhc2VzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdH0gY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDbGFzc2lmaWNhdGlvbihjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQ29tcGxldGlvblJlcXVlc3R9IGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDb21wbGV0aW9uKGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVDb21wbGV0aW9uKGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGVkaXQgZm9yIHRoZSBwcm92aWRlZCBpbnB1dCwgaW5zdHJ1Y3Rpb24sIGFuZCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUVkaXRSZXF1ZXN0fSBjcmVhdGVFZGl0UmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRWRpdChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlRWRpdChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlbWJlZGRpbmcgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgdGV4dC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVFbWJlZGRpbmdSZXF1ZXN0fSBjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVFbWJlZGRpbmcoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlRW1iZWRkaW5nKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwbG9hZCBhIGZpbGUgdGhhdCBjb250YWlucyBkb2N1bWVudChzKSB0byBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzIGVuZHBvaW50cy9mZWF0dXJlcy4gQ3VycmVudGx5LCB0aGUgc2l6ZSBvZiBhbGwgdGhlIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZSBvcmdhbml6YXRpb24gY2FuIGJlIHVwIHRvIDEgR0IuIFBsZWFzZSBjb250YWN0IHVzIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZSBzdG9yYWdlIGxpbWl0LlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgTmFtZSBvZiB0aGUgW0pTT04gTGluZXNdKGh0dHBzOi8vanNvbmxpbmVzLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC8pIGZpbGUgdG8gYmUgdXBsb2FkZWQuICBJZiB0aGUgJiN4NjA7cHVycG9zZSYjeDYwOyBpcyBzZXQgdG8gXFxcXFxcJnF1b3Q7ZmluZS10dW5lXFxcXFxcJnF1b3Q7LCBlYWNoIGxpbmUgaXMgYSBKU09OIHJlY29yZCB3aXRoIFxcXFxcXCZxdW90O3Byb21wdFxcXFxcXCZxdW90OyBhbmQgXFxcXFxcJnF1b3Q7Y29tcGxldGlvblxcXFxcXCZxdW90OyBmaWVsZHMgcmVwcmVzZW50aW5nIHlvdXIgW3RyYWluaW5nIGV4YW1wbGVzXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcvcHJlcGFyZS10cmFpbmluZy1kYXRhKS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHB1cnBvc2UgVGhlIGludGVuZGVkIHB1cnBvc2Ugb2YgdGhlIHVwbG9hZGVkIGRvY3VtZW50cy4gIFVzZSBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDsgZm9yIFtGaW5lLXR1bmluZ10oL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmVzKS4gVGhpcyBhbGxvd3MgdXMgdG8gdmFsaWRhdGUgdGhlIGZvcm1hdCBvZiB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUZpbGUoZmlsZSwgcHVycG9zZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlRmlsZShmaWxlLCBwdXJwb3NlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgam9iIHRoYXQgZmluZS10dW5lcyBhIHNwZWNpZmllZCBtb2RlbCBmcm9tIGEgZ2l2ZW4gZGF0YXNldC4gIFJlc3BvbnNlIGluY2x1ZGVzIGRldGFpbHMgb2YgdGhlIGVucXVldWVkIGpvYiBpbmNsdWRpbmcgam9iIHN0YXR1cyBhbmQgdGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUZpbmVUdW5lUmVxdWVzdH0gY3JlYXRlRmluZVR1bmVSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVGaW5lVHVuZShjcmVhdGVGaW5lVHVuZVJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUZpbmVUdW5lKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBpbWFnZSBnaXZlbiBhIHByb21wdC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVJbWFnZVJlcXVlc3R9IGNyZWF0ZUltYWdlUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2UoY3JlYXRlSW1hZ2VSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVJbWFnZShjcmVhdGVJbWFnZVJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gZWRpdGVkIG9yIGV4dGVuZGVkIGltYWdlIGdpdmVuIGFuIG9yaWdpbmFsIGltYWdlIGFuZCBhIHByb21wdC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBpbWFnZSBUaGUgaW1hZ2UgdG8gZWRpdC4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgc3F1YXJlLiBJZiBtYXNrIGlzIG5vdCBwcm92aWRlZCwgaW1hZ2UgbXVzdCBoYXZlIHRyYW5zcGFyZW5jeSwgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIHRoZSBtYXNrLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvbXB0IEEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgZGVzaXJlZCBpbWFnZShzKS4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDEwMDAgY2hhcmFjdGVycy5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBbbWFza10gQW4gYWRkaXRpb25hbCBpbWFnZSB3aG9zZSBmdWxseSB0cmFuc3BhcmVudCBhcmVhcyAoZS5nLiB3aGVyZSBhbHBoYSBpcyB6ZXJvKSBpbmRpY2F0ZSB3aGVyZSAmI3g2MDtpbWFnZSYjeDYwOyBzaG91bGQgYmUgZWRpdGVkLiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBoYXZlIHRoZSBzYW1lIGRpbWVuc2lvbnMgYXMgJiN4NjA7aW1hZ2UmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtzaXplXSBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7MjU2eDI1NiYjeDYwOywgJiN4NjA7NTEyeDUxMiYjeDYwOywgb3IgJiN4NjA7MTAyNHgxMDI0JiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IGluIHdoaWNoIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFyZSByZXR1cm5lZC4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7dXJsJiN4NjA7IG9yICYjeDYwO2I2NF9qc29uJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJdIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIFtMZWFybiBtb3JlXSgvZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzL2VuZC11c2VyLWlkcykuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVJbWFnZUVkaXQoaW1hZ2UsIHByb21wdCwgbWFzaywgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUltYWdlRWRpdChpbWFnZSwgcHJvbXB0LCBtYXNrLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byB1c2UgYXMgdGhlIGJhc2lzIGZvciB0aGUgdmFyaWF0aW9uKHMpLiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtzaXplXSBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7MjU2eDI1NiYjeDYwOywgJiN4NjA7NTEyeDUxMiYjeDYwOywgb3IgJiN4NjA7MTAyNHgxMDI0JiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IGluIHdoaWNoIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFyZSByZXR1cm5lZC4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7dXJsJiN4NjA7IG9yICYjeDYwO2I2NF9qc29uJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJdIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIFtMZWFybiBtb3JlXSgvZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzL2VuZC11c2VyLWlkcykuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVJbWFnZVZhcmlhdGlvbihpbWFnZSwgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyBpZiB0ZXh0IHZpb2xhdGVzIE9wZW5BSVxcJ3MgQ29udGVudCBQb2xpY3lcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVNb2RlcmF0aW9uUmVxdWVzdH0gY3JlYXRlTW9kZXJhdGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRoZSBzZWFyY2ggZW5kcG9pbnQgY29tcHV0ZXMgc2ltaWxhcml0eSBzY29yZXMgYmV0d2VlbiBwcm92aWRlZCBxdWVyeSBhbmQgZG9jdW1lbnRzLiBEb2N1bWVudHMgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgQVBJIGlmIHRoZXJlIGFyZSBubyBtb3JlIHRoYW4gMjAwIG9mIHRoZW0uICBUbyBnbyBiZXlvbmQgdGhlIDIwMCBkb2N1bWVudCBsaW1pdCwgZG9jdW1lbnRzIGNhbiBiZSBwcm9jZXNzZWQgb2ZmbGluZSBhbmQgdGhlbiB1c2VkIGZvciBlZmZpY2llbnQgcmV0cmlldmFsIGF0IHF1ZXJ5IHRpbWUuIFdoZW4gYGZpbGVgIGlzIHNldCwgdGhlIHNlYXJjaCBlbmRwb2ludCBzZWFyY2hlcyBvdmVyIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBnaXZlbiBmaWxlIGFuZCByZXR1cm5zIHVwIHRvIHRoZSBgbWF4X3JlcmFua2AgbnVtYmVyIG9mIGRvY3VtZW50cy4gVGhlc2UgZG9jdW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYWxvbmcgd2l0aCB0aGVpciBzZWFyY2ggc2NvcmVzLiAgVGhlIHNpbWlsYXJpdHkgc2NvcmUgaXMgYSBwb3NpdGl2ZSBzY29yZSB0aGF0IHVzdWFsbHkgcmFuZ2VzIGZyb20gMCB0byAzMDAgKGJ1dCBjYW4gc29tZXRpbWVzIGdvIGhpZ2hlciksIHdoZXJlIGEgc2NvcmUgYWJvdmUgMjAwIHVzdWFsbHkgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHNlbWFudGljYWxseSBzaW1pbGFyIHRvIHRoZSBxdWVyeS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZUlkIFRoZSBJRCBvZiB0aGUgZW5naW5lIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0LiAgWW91IGNhbiBzZWxlY3Qgb25lIG9mICYjeDYwO2FkYSYjeDYwOywgJiN4NjA7YmFiYmFnZSYjeDYwOywgJiN4NjA7Y3VyaWUmI3g2MDssIG9yICYjeDYwO2RhdmluY2kmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlU2VhcmNoUmVxdWVzdH0gY3JlYXRlU2VhcmNoUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlU2VhcmNoKGVuZ2luZUlkLCBjcmVhdGVTZWFyY2hSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVTZWFyY2goZW5naW5lSWQsIGNyZWF0ZVNlYXJjaFJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zY3JpYmVzIGF1ZGlvIGludG8gdGhlIGlucHV0IGxhbmd1YWdlLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgb2JqZWN0IChub3QgZmlsZSBuYW1lKSB0byB0cmFuc2NyaWJlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBtYXRjaCB0aGUgYXVkaW8gbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW4gW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIGZvcm1hdCB3aWxsIGltcHJvdmUgYWNjdXJhY3kgYW5kIGxhdGVuY3kuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2NyaXB0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVHJhbnNsYXRlcyBhdWRpbyBpbnRvIGludG8gRW5nbGlzaC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIFRoZSBhdWRpbyBmaWxlIG9iamVjdCAobm90IGZpbGUgbmFtZSkgdHJhbnNsYXRlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBiZSBpbiBFbmdsaXNoLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGVtcGVyYXR1cmVdIFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZSwgYmV0d2VlbiAwIGFuZCAxLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGwgbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmUgZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy4gSWYgc2V0IHRvIDAsIHRoZSBtb2RlbCB3aWxsIHVzZSBbbG9nIHByb2JhYmlsaXR5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb2dfcHJvYmFiaWxpdHkpIHRvIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2UgdGhlIHRlbXBlcmF0dXJlIHVudGlsIGNlcnRhaW4gdGhyZXNob2xkcyBhcmUgaGl0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlVHJhbnNsYXRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVUcmFuc2xhdGlvbihmaWxlLCBtb2RlbCwgcHJvbXB0LCByZXNwb25zZUZvcm1hdCwgdGVtcGVyYXR1cmUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVGaWxlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuZGVsZXRlRmlsZShmaWxlSWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBUaGUgbW9kZWwgdG8gZGVsZXRlXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVNb2RlbChtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZG93bmxvYWRGaWxlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuZG93bmxvYWRGaWxlKGZpbGVJZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgKG5vbi1maW5ldHVuZWQpIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RW5naW5lcyhvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5saXN0RW5naW5lcyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGEgbGlzdCBvZiBmaWxlcyB0aGF0IGJlbG9uZyB0byB0aGUgdXNlclxcJ3Mgb3JnYW5pemF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbGVzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmxpc3RGaWxlcyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBHZXQgZmluZS1ncmFpbmVkIHN0YXR1cyB1cGRhdGVzIGZvciBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBnZXQgZXZlbnRzIGZvci5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbc3RyZWFtXSBXaGV0aGVyIHRvIHN0cmVhbSBldmVudHMgZm9yIHRoZSBmaW5lLXR1bmUgam9iLiBJZiBzZXQgdG8gdHJ1ZSwgZXZlbnRzIHdpbGwgYmUgc2VudCBhcyBkYXRhLW9ubHkgW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdCkgYXMgdGhleSBiZWNvbWUgYXZhaWxhYmxlLiBUaGUgc3RyZWFtIHdpbGwgdGVybWluYXRlIHdpdGggYSAmI3g2MDtkYXRhOiBbRE9ORV0mI3g2MDsgbWVzc2FnZSB3aGVuIHRoZSBqb2IgaXMgZmluaXNoZWQgKHN1Y2NlZWRlZCwgY2FuY2VsbGVkLCBvciBmYWlsZWQpLiAgSWYgc2V0IHRvIGZhbHNlLCBvbmx5IGV2ZW50cyBnZW5lcmF0ZWQgc28gZmFyIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RmluZVR1bmVFdmVudHMoZmluZVR1bmVJZCwgc3RyZWFtLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5saXN0RmluZVR1bmVFdmVudHMoZmluZVR1bmVJZCwgc3RyZWFtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0IHlvdXIgb3JnYW5pemF0aW9uXFwncyBmaW5lLXR1bmluZyBqb2JzXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RmluZVR1bmVzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmxpc3RGaW5lVHVuZXMob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RNb2RlbHMob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IubGlzdE1vZGVscyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGl0IHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmVJZCBUaGUgSUQgb2YgdGhlIGVuZ2luZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVFbmdpbmUoZW5naW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLnJldHJpZXZlRW5naW5lKGVuZ2luZUlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLnJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgaW5mbyBhYm91dCB0aGUgZmluZS10dW5lIGpvYi4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5yZXRyaWV2ZUZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZGVsIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBwZXJtaXNzaW9uaW5nLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIElEIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVNb2RlbChtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IucmV0cmlldmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuLyoqXG4gKiBPcGVuQUlBcGkgLSBmYWN0b3J5IGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLk9wZW5BSUFwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbiwgYmFzZVBhdGgsIGF4aW9zKSB7XG4gICAgY29uc3QgbG9jYWxWYXJGcCA9IGV4cG9ydHMuT3BlbkFJQXBpRnAoY29uZmlndXJhdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEltbWVkaWF0ZWx5IGNhbmNlbCBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBjYW5jZWxcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNhbmNlbEZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNhbmNlbEZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBBbnN3ZXJzIHRoZSBzcGVjaWZpZWQgcXVlc3Rpb24gdXNpbmcgdGhlIHByb3ZpZGVkIGRvY3VtZW50cyBhbmQgZXhhbXBsZXMuICBUaGUgZW5kcG9pbnQgZmlyc3QgW3NlYXJjaGVzXSgvZG9jcy9hcGktcmVmZXJlbmNlL3NlYXJjaGVzKSBvdmVyIHByb3ZpZGVkIGRvY3VtZW50cyBvciBmaWxlcyB0byBmaW5kIHJlbGV2YW50IGNvbnRleHQuIFRoZSByZWxldmFudCBjb250ZXh0IGlzIGNvbWJpbmVkIHdpdGggdGhlIHByb3ZpZGVkIGV4YW1wbGVzIGFuZCBxdWVzdGlvbiB0byBjcmVhdGUgdGhlIHByb21wdCBmb3IgW2NvbXBsZXRpb25dKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29tcGxldGlvbnMpLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUFuc3dlclJlcXVlc3R9IGNyZWF0ZUFuc3dlclJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUFuc3dlcihjcmVhdGVBbnN3ZXJSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVBbnN3ZXIoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBtb2RlbCByZXNwb25zZSBmb3IgdGhlIGdpdmVuIGNoYXQgY29udmVyc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUNoYXRDb21wbGV0aW9uKGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3R9IGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2xhc3NpZmljYXRpb24oY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVDbGFzc2lmaWNhdGlvbihjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgY29tcGxldGlvbiBmb3IgdGhlIHByb3ZpZGVkIHByb21wdCBhbmQgcGFyYW1ldGVycy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ29tcGxldGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGVkaXQgZm9yIHRoZSBwcm92aWRlZCBpbnB1dCwgaW5zdHJ1Y3Rpb24sIGFuZCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUVkaXRSZXF1ZXN0fSBjcmVhdGVFZGl0UmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRWRpdChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlRWRpdChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gZW1iZWRkaW5nIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGlucHV0IHRleHQuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRW1iZWRkaW5nUmVxdWVzdH0gY3JlYXRlRW1iZWRkaW5nUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRW1iZWRkaW5nKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUVtYmVkZGluZyhjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVXBsb2FkIGEgZmlsZSB0aGF0IGNvbnRhaW5zIGRvY3VtZW50KHMpIHRvIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzL2ZlYXR1cmVzLiBDdXJyZW50bHksIHRoZSBzaXplIG9mIGFsbCB0aGUgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXAgdG8gMSBHQi4gUGxlYXNlIGNvbnRhY3QgdXMgaWYgeW91IG5lZWQgdG8gaW5jcmVhc2UgdGhlIHN0b3JhZ2UgbGltaXQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBOYW1lIG9mIHRoZSBbSlNPTiBMaW5lc10oaHR0cHM6Ly9qc29ubGluZXMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LykgZmlsZSB0byBiZSB1cGxvYWRlZC4gIElmIHRoZSAmI3g2MDtwdXJwb3NlJiN4NjA7IGlzIHNldCB0byBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDssIGVhY2ggbGluZSBpcyBhIEpTT04gcmVjb3JkIHdpdGggXFxcXFxcJnF1b3Q7cHJvbXB0XFxcXFxcJnF1b3Q7IGFuZCBcXFxcXFwmcXVvdDtjb21wbGV0aW9uXFxcXFxcJnF1b3Q7IGZpZWxkcyByZXByZXNlbnRpbmcgeW91ciBbdHJhaW5pbmcgZXhhbXBsZXNdKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZy9wcmVwYXJlLXRyYWluaW5nLWRhdGEpLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHVycG9zZSBUaGUgaW50ZW5kZWQgcHVycG9zZSBvZiB0aGUgdXBsb2FkZWQgZG9jdW1lbnRzLiAgVXNlIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OyBmb3IgW0ZpbmUtdHVuaW5nXSgvZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuZXMpLiBUaGlzIGFsbG93cyB1cyB0byB2YWxpZGF0ZSB0aGUgZm9ybWF0IG9mIHRoZSB1cGxvYWRlZCBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRmlsZShmaWxlLCBwdXJwb3NlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVGaWxlKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgam9iIHRoYXQgZmluZS10dW5lcyBhIHNwZWNpZmllZCBtb2RlbCBmcm9tIGEgZ2l2ZW4gZGF0YXNldC4gIFJlc3BvbnNlIGluY2x1ZGVzIGRldGFpbHMgb2YgdGhlIGVucXVldWVkIGpvYiBpbmNsdWRpbmcgam9iIHN0YXR1cyBhbmQgdGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUZpbmVUdW5lUmVxdWVzdH0gY3JlYXRlRmluZVR1bmVSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVGaW5lVHVuZShjcmVhdGVGaW5lVHVuZVJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUZpbmVUdW5lKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gaW1hZ2UgZ2l2ZW4gYSBwcm9tcHQuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlSW1hZ2VSZXF1ZXN0fSBjcmVhdGVJbWFnZVJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlKGNyZWF0ZUltYWdlUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlSW1hZ2UoY3JlYXRlSW1hZ2VSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byBlZGl0LiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuIElmIG1hc2sgaXMgbm90IHByb3ZpZGVkLCBpbWFnZSBtdXN0IGhhdmUgdHJhbnNwYXJlbmN5LCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgdGhlIG1hc2suXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgQSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZXNpcmVkIGltYWdlKHMpLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMTAwMCBjaGFyYWN0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IFttYXNrXSBBbiBhZGRpdGlvbmFsIGltYWdlIHdob3NlIGZ1bGx5IHRyYW5zcGFyZW50IGFyZWFzIChlLmcuIHdoZXJlIGFscGhhIGlzIHplcm8pIGluZGljYXRlIHdoZXJlICYjeDYwO2ltYWdlJiN4NjA7IHNob3VsZCBiZSBlZGl0ZWQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBhcyAmI3g2MDtpbWFnZSYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlRWRpdChpbWFnZSwgcHJvbXB0LCBtYXNrLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlSW1hZ2VFZGl0KGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byB1c2UgYXMgdGhlIGJhc2lzIGZvciB0aGUgdmFyaWF0aW9uKHMpLiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtzaXplXSBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7MjU2eDI1NiYjeDYwOywgJiN4NjA7NTEyeDUxMiYjeDYwOywgb3IgJiN4NjA7MTAyNHgxMDI0JiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IGluIHdoaWNoIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFyZSByZXR1cm5lZC4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7dXJsJiN4NjA7IG9yICYjeDYwO2I2NF9qc29uJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJdIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIFtMZWFybiBtb3JlXSgvZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzL2VuZC11c2VyLWlkcykuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVJbWFnZVZhcmlhdGlvbihpbWFnZSwgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgaWYgdGV4dCB2aW9sYXRlcyBPcGVuQUlcXCdzIENvbnRlbnQgUG9saWN5XG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlTW9kZXJhdGlvblJlcXVlc3R9IGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVNb2RlcmF0aW9uKGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVNb2RlcmF0aW9uKGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVGhlIHNlYXJjaCBlbmRwb2ludCBjb21wdXRlcyBzaW1pbGFyaXR5IHNjb3JlcyBiZXR3ZWVuIHByb3ZpZGVkIHF1ZXJ5IGFuZCBkb2N1bWVudHMuIERvY3VtZW50cyBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBBUEkgaWYgdGhlcmUgYXJlIG5vIG1vcmUgdGhhbiAyMDAgb2YgdGhlbS4gIFRvIGdvIGJleW9uZCB0aGUgMjAwIGRvY3VtZW50IGxpbWl0LCBkb2N1bWVudHMgY2FuIGJlIHByb2Nlc3NlZCBvZmZsaW5lIGFuZCB0aGVuIHVzZWQgZm9yIGVmZmljaWVudCByZXRyaWV2YWwgYXQgcXVlcnkgdGltZS4gV2hlbiBgZmlsZWAgaXMgc2V0LCB0aGUgc2VhcmNoIGVuZHBvaW50IHNlYXJjaGVzIG92ZXIgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGdpdmVuIGZpbGUgYW5kIHJldHVybnMgdXAgdG8gdGhlIGBtYXhfcmVyYW5rYCBudW1iZXIgb2YgZG9jdW1lbnRzLiBUaGVzZSBkb2N1bWVudHMgd2lsbCBiZSByZXR1cm5lZCBhbG9uZyB3aXRoIHRoZWlyIHNlYXJjaCBzY29yZXMuICBUaGUgc2ltaWxhcml0eSBzY29yZSBpcyBhIHBvc2l0aXZlIHNjb3JlIHRoYXQgdXN1YWxseSByYW5nZXMgZnJvbSAwIHRvIDMwMCAoYnV0IGNhbiBzb21ldGltZXMgZ28gaGlnaGVyKSwgd2hlcmUgYSBzY29yZSBhYm92ZSAyMDAgdXN1YWxseSBtZWFucyB0aGUgZG9jdW1lbnQgaXMgc2VtYW50aWNhbGx5IHNpbWlsYXIgdG8gdGhlIHF1ZXJ5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3QuICBZb3UgY2FuIHNlbGVjdCBvbmUgb2YgJiN4NjA7YWRhJiN4NjA7LCAmI3g2MDtiYWJiYWdlJiN4NjA7LCAmI3g2MDtjdXJpZSYjeDYwOywgb3IgJiN4NjA7ZGF2aW5jaSYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVTZWFyY2hSZXF1ZXN0fSBjcmVhdGVTZWFyY2hSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVTZWFyY2goZW5naW5lSWQsIGNyZWF0ZVNlYXJjaFJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZVNlYXJjaChlbmdpbmVJZCwgY3JlYXRlU2VhcmNoUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zY3JpYmVzIGF1ZGlvIGludG8gdGhlIGlucHV0IGxhbmd1YWdlLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgb2JqZWN0IChub3QgZmlsZSBuYW1lKSB0byB0cmFuc2NyaWJlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBtYXRjaCB0aGUgYXVkaW8gbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW4gW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIGZvcm1hdCB3aWxsIGltcHJvdmUgYWNjdXJhY3kgYW5kIGxhdGVuY3kuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2NyaXB0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zbGF0ZXMgYXVkaW8gaW50byBpbnRvIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSBvYmplY3QgKG5vdCBmaWxlIG5hbWUpIHRyYW5zbGF0ZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgYmUgaW4gRW5nbGlzaC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBvZiB0aGUgdHJhbnNjcmlwdCBvdXRwdXQsIGluIG9uZSBvZiB0aGVzZSBvcHRpb25zOiBqc29uLCB0ZXh0LCBzcnQsIHZlcmJvc2VfanNvbiwgb3IgdnR0LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RlbXBlcmF0dXJlXSBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUsIGJldHdlZW4gMCBhbmQgMS4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIElmIHNldCB0byAwLCB0aGUgbW9kZWwgd2lsbCB1c2UgW2xvZyBwcm9iYWJpbGl0eV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9nX3Byb2JhYmlsaXR5KSB0byBhdXRvbWF0aWNhbGx5IGluY3JlYXNlIHRoZSB0ZW1wZXJhdHVyZSB1bnRpbCBjZXJ0YWluIHRocmVzaG9sZHMgYXJlIGhpdC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVRyYW5zbGF0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlVHJhbnNsYXRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgRGVsZXRlIGEgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZUZpbGUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5kZWxldGVGaWxlKGZpbGVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBUaGUgbW9kZWwgdG8gZGVsZXRlXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVNb2RlbChtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGRvd25sb2FkRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmRvd25sb2FkRmlsZShmaWxlSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSAobm9uLWZpbmV0dW5lZCkgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RFbmdpbmVzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxpc3RFbmdpbmVzKG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGEgbGlzdCBvZiBmaWxlcyB0aGF0IGJlbG9uZyB0byB0aGUgdXNlclxcJ3Mgb3JnYW5pemF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbGVzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxpc3RGaWxlcyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgR2V0IGZpbmUtZ3JhaW5lZCBzdGF0dXMgdXBkYXRlcyBmb3IgYSBmaW5lLXR1bmUgam9iLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gZ2V0IGV2ZW50cyBmb3IuXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0cmVhbV0gV2hldGhlciB0byBzdHJlYW0gZXZlbnRzIGZvciB0aGUgZmluZS10dW5lIGpvYi4gSWYgc2V0IHRvIHRydWUsIGV2ZW50cyB3aWxsIGJlIHNlbnQgYXMgZGF0YS1vbmx5IFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4gVGhlIHN0cmVhbSB3aWxsIHRlcm1pbmF0ZSB3aXRoIGEgJiN4NjA7ZGF0YTogW0RPTkVdJiN4NjA7IG1lc3NhZ2Ugd2hlbiB0aGUgam9iIGlzIGZpbmlzaGVkIChzdWNjZWVkZWQsIGNhbmNlbGxlZCwgb3IgZmFpbGVkKS4gIElmIHNldCB0byBmYWxzZSwgb25seSBldmVudHMgZ2VuZXJhdGVkIHNvIGZhciB3aWxsIGJlIHJldHVybmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbmVUdW5lRXZlbnRzKGZpbmVUdW5lSWQsIHN0cmVhbSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAubGlzdEZpbmVUdW5lRXZlbnRzKGZpbmVUdW5lSWQsIHN0cmVhbSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3QgeW91ciBvcmdhbml6YXRpb25cXCdzIGZpbmUtdHVuaW5nIGpvYnNcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaW5lVHVuZXMob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAubGlzdEZpbmVUdW5lcyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RNb2RlbHMob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAubGlzdE1vZGVscyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBpdCBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRW5naW5lKGVuZ2luZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5yZXRyaWV2ZUVuZ2luZShlbmdpbmVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVGaWxlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAucmV0cmlldmVGaWxlKGZpbGVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgaW5mbyBhYm91dCB0aGUgZmluZS10dW5lIGpvYi4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5yZXRyaWV2ZUZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFRoZSBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlTW9kZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLnJldHJpZXZlTW9kZWwobW9kZWwsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4vKipcbiAqIE9wZW5BSUFwaSAtIG9iamVjdC1vcmllbnRlZCBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBPcGVuQUlBcGlcbiAqIEBleHRlbmRzIHtCYXNlQVBJfVxuICovXG5jbGFzcyBPcGVuQUlBcGkgZXh0ZW5kcyBiYXNlXzEuQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBJbW1lZGlhdGVseSBjYW5jZWwgYSBmaW5lLXR1bmUgam9iLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBjYW5jZWxcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNhbmNlbEZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jYW5jZWxGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBBbnN3ZXJzIHRoZSBzcGVjaWZpZWQgcXVlc3Rpb24gdXNpbmcgdGhlIHByb3ZpZGVkIGRvY3VtZW50cyBhbmQgZXhhbXBsZXMuICBUaGUgZW5kcG9pbnQgZmlyc3QgW3NlYXJjaGVzXSgvZG9jcy9hcGktcmVmZXJlbmNlL3NlYXJjaGVzKSBvdmVyIHByb3ZpZGVkIGRvY3VtZW50cyBvciBmaWxlcyB0byBmaW5kIHJlbGV2YW50IGNvbnRleHQuIFRoZSByZWxldmFudCBjb250ZXh0IGlzIGNvbWJpbmVkIHdpdGggdGhlIHByb3ZpZGVkIGV4YW1wbGVzIGFuZCBxdWVzdGlvbiB0byBjcmVhdGUgdGhlIHByb21wdCBmb3IgW2NvbXBsZXRpb25dKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29tcGxldGlvbnMpLlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlQW5zd2VyUmVxdWVzdH0gY3JlYXRlQW5zd2VyUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVBbnN3ZXIoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUFuc3dlcihjcmVhdGVBbnN3ZXJSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbW9kZWwgcmVzcG9uc2UgZm9yIHRoZSBnaXZlbiBjaGF0IGNvbnZlcnNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdH0gY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHtDcmVhdGVDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ29tcGxldGlvblJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVDb21wbGV0aW9uKGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGVkaXQgZm9yIHRoZSBwcm92aWRlZCBpbnB1dCwgaW5zdHJ1Y3Rpb24sIGFuZCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlRWRpdFJlcXVlc3R9IGNyZWF0ZUVkaXRSZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlRWRpdChjcmVhdGVFZGl0UmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlbWJlZGRpbmcgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgdGV4dC5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUVtYmVkZGluZ1JlcXVlc3R9IGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUVtYmVkZGluZyhjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlRW1iZWRkaW5nKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFVwbG9hZCBhIGZpbGUgdGhhdCBjb250YWlucyBkb2N1bWVudChzKSB0byBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzIGVuZHBvaW50cy9mZWF0dXJlcy4gQ3VycmVudGx5LCB0aGUgc2l6ZSBvZiBhbGwgdGhlIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZSBvcmdhbml6YXRpb24gY2FuIGJlIHVwIHRvIDEgR0IuIFBsZWFzZSBjb250YWN0IHVzIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZSBzdG9yYWdlIGxpbWl0LlxuICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBOYW1lIG9mIHRoZSBbSlNPTiBMaW5lc10oaHR0cHM6Ly9qc29ubGluZXMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LykgZmlsZSB0byBiZSB1cGxvYWRlZC4gIElmIHRoZSAmI3g2MDtwdXJwb3NlJiN4NjA7IGlzIHNldCB0byBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDssIGVhY2ggbGluZSBpcyBhIEpTT04gcmVjb3JkIHdpdGggXFxcXFxcJnF1b3Q7cHJvbXB0XFxcXFxcJnF1b3Q7IGFuZCBcXFxcXFwmcXVvdDtjb21wbGV0aW9uXFxcXFxcJnF1b3Q7IGZpZWxkcyByZXByZXNlbnRpbmcgeW91ciBbdHJhaW5pbmcgZXhhbXBsZXNdKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZy9wcmVwYXJlLXRyYWluaW5nLWRhdGEpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXJwb3NlIFRoZSBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoZSB1cGxvYWRlZCBkb2N1bWVudHMuICBVc2UgXFxcXFxcJnF1b3Q7ZmluZS10dW5lXFxcXFxcJnF1b3Q7IGZvciBbRmluZS10dW5pbmddKC9kb2NzL2FwaS1yZWZlcmVuY2UvZmluZS10dW5lcykuIFRoaXMgYWxsb3dzIHVzIHRvIHZhbGlkYXRlIHRoZSBmb3JtYXQgb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVGaWxlKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVGaWxlKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBqb2IgdGhhdCBmaW5lLXR1bmVzIGEgc3BlY2lmaWVkIG1vZGVsIGZyb20gYSBnaXZlbiBkYXRhc2V0LiAgUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZSBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICogQHBhcmFtIHtDcmVhdGVGaW5lVHVuZVJlcXVlc3R9IGNyZWF0ZUZpbmVUdW5lUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlRmluZVR1bmUoY3JlYXRlRmluZVR1bmVSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlRmluZVR1bmUoY3JlYXRlRmluZVR1bmVSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlSW1hZ2VSZXF1ZXN0fSBjcmVhdGVJbWFnZVJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUltYWdlKGNyZWF0ZUltYWdlUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUltYWdlKGNyZWF0ZUltYWdlUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIGVkaXQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS4gSWYgbWFzayBpcyBub3QgcHJvdmlkZWQsIGltYWdlIG11c3QgaGF2ZSB0cmFuc3BhcmVuY3ksIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyB0aGUgbWFzay5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvbXB0IEEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgZGVzaXJlZCBpbWFnZShzKS4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDEwMDAgY2hhcmFjdGVycy5cbiAgICAgKiBAcGFyYW0ge0ZpbGV9IFttYXNrXSBBbiBhZGRpdGlvbmFsIGltYWdlIHdob3NlIGZ1bGx5IHRyYW5zcGFyZW50IGFyZWFzIChlLmcuIHdoZXJlIGFscGhhIGlzIHplcm8pIGluZGljYXRlIHdoZXJlICYjeDYwO2ltYWdlJiN4NjA7IHNob3VsZCBiZSBlZGl0ZWQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBhcyAmI3g2MDtpbWFnZSYjeDYwOy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzaXplXSBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7MjU2eDI1NiYjeDYwOywgJiN4NjA7NTEyeDUxMiYjeDYwOywgb3IgJiN4NjA7MTAyNHgxMDI0JiN4NjA7LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt1c2VyXSBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG8gbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLiBbTGVhcm4gbW9yZV0oL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcy9lbmQtdXNlci1pZHMpLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlSW1hZ2VFZGl0KGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlSW1hZ2VFZGl0KGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuXG4gICAgICogQHBhcmFtIHtGaWxlfSBpbWFnZSBUaGUgaW1hZ2UgdG8gdXNlIGFzIHRoZSBiYXNpcyBmb3IgdGhlIHZhcmlhdGlvbihzKS4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgc3F1YXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mICYjeDYwO3VybCYjeDYwOyBvciAmI3g2MDtiNjRfanNvbiYjeDYwOy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJdIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIFtMZWFybiBtb3JlXSgvZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzL2VuZC11c2VyLWlkcykuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVJbWFnZVZhcmlhdGlvbihpbWFnZSwgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVJbWFnZVZhcmlhdGlvbihpbWFnZSwgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgaWYgdGV4dCB2aW9sYXRlcyBPcGVuQUlcXCdzIENvbnRlbnQgUG9saWN5XG4gICAgICogQHBhcmFtIHtDcmVhdGVNb2RlcmF0aW9uUmVxdWVzdH0gY3JlYXRlTW9kZXJhdGlvblJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVNb2RlcmF0aW9uKGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBUaGUgc2VhcmNoIGVuZHBvaW50IGNvbXB1dGVzIHNpbWlsYXJpdHkgc2NvcmVzIGJldHdlZW4gcHJvdmlkZWQgcXVlcnkgYW5kIGRvY3VtZW50cy4gRG9jdW1lbnRzIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIEFQSSBpZiB0aGVyZSBhcmUgbm8gbW9yZSB0aGFuIDIwMCBvZiB0aGVtLiAgVG8gZ28gYmV5b25kIHRoZSAyMDAgZG9jdW1lbnQgbGltaXQsIGRvY3VtZW50cyBjYW4gYmUgcHJvY2Vzc2VkIG9mZmxpbmUgYW5kIHRoZW4gdXNlZCBmb3IgZWZmaWNpZW50IHJldHJpZXZhbCBhdCBxdWVyeSB0aW1lLiBXaGVuIGBmaWxlYCBpcyBzZXQsIHRoZSBzZWFyY2ggZW5kcG9pbnQgc2VhcmNoZXMgb3ZlciBhbGwgdGhlIGRvY3VtZW50cyBpbiB0aGUgZ2l2ZW4gZmlsZSBhbmQgcmV0dXJucyB1cCB0byB0aGUgYG1heF9yZXJhbmtgIG51bWJlciBvZiBkb2N1bWVudHMuIFRoZXNlIGRvY3VtZW50cyB3aWxsIGJlIHJldHVybmVkIGFsb25nIHdpdGggdGhlaXIgc2VhcmNoIHNjb3Jlcy4gIFRoZSBzaW1pbGFyaXR5IHNjb3JlIGlzIGEgcG9zaXRpdmUgc2NvcmUgdGhhdCB1c3VhbGx5IHJhbmdlcyBmcm9tIDAgdG8gMzAwIChidXQgY2FuIHNvbWV0aW1lcyBnbyBoaWdoZXIpLCB3aGVyZSBhIHNjb3JlIGFib3ZlIDIwMCB1c3VhbGx5IG1lYW5zIHRoZSBkb2N1bWVudCBpcyBzZW1hbnRpY2FsbHkgc2ltaWxhciB0byB0aGUgcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZUlkIFRoZSBJRCBvZiB0aGUgZW5naW5lIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0LiAgWW91IGNhbiBzZWxlY3Qgb25lIG9mICYjeDYwO2FkYSYjeDYwOywgJiN4NjA7YmFiYmFnZSYjeDYwOywgJiN4NjA7Y3VyaWUmI3g2MDssIG9yICYjeDYwO2RhdmluY2kmI3g2MDsuXG4gICAgICogQHBhcmFtIHtDcmVhdGVTZWFyY2hSZXF1ZXN0fSBjcmVhdGVTZWFyY2hSZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZVNlYXJjaChlbmdpbmVJZCwgY3JlYXRlU2VhcmNoUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZVNlYXJjaChlbmdpbmVJZCwgY3JlYXRlU2VhcmNoUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIFRoZSBhdWRpbyBmaWxlIG9iamVjdCAobm90IGZpbGUgbmFtZSkgdG8gdHJhbnNjcmliZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Byb21wdF0gQW4gb3B0aW9uYWwgdGV4dCB0byBndWlkZSB0aGUgbW9kZWxcXFxcXFwmIzM5O3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpbyBzZWdtZW50LiBUaGUgW3Byb21wdF0oL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0L3Byb21wdGluZykgc2hvdWxkIG1hdGNoIHRoZSBhdWRpbyBsYW5ndWFnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZV0gVGhlIGxhbmd1YWdlIG9mIHRoZSBpbnB1dCBhdWRpby4gU3VwcGx5aW5nIHRoZSBpbnB1dCBsYW5ndWFnZSBpbiBbSVNPLTYzOS0xXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX0lTT182MzktMV9jb2RlcykgZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgVHJhbnNsYXRlcyBhdWRpbyBpbnRvIGludG8gRW5nbGlzaC5cbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgb2JqZWN0IChub3QgZmlsZSBuYW1lKSB0cmFuc2xhdGUsIGluIG9uZSBvZiB0aGVzZSBmb3JtYXRzOiBtcDMsIG1wNCwgbXBlZywgbXBnYSwgbTRhLCB3YXYsIG9yIHdlYm0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBiZSBpbiBFbmdsaXNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RlbXBlcmF0dXJlXSBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUsIGJldHdlZW4gMCBhbmQgMS4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIElmIHNldCB0byAwLCB0aGUgbW9kZWwgd2lsbCB1c2UgW2xvZyBwcm9iYWJpbGl0eV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9nX3Byb2JhYmlsaXR5KSB0byBhdXRvbWF0aWNhbGx5IGluY3JlYXNlIHRoZSB0ZW1wZXJhdHVyZSB1bnRpbCBjZXJ0YWluIHRocmVzaG9sZHMgYXJlIGhpdC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZVRyYW5zbGF0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZVRyYW5zbGF0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgRGVsZXRlIGEgZmlsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgZGVsZXRlRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5kZWxldGVGaWxlKGZpbGVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgRGVsZXRlIGEgZmluZS10dW5lZCBtb2RlbC4gWW91IG11c3QgaGF2ZSB0aGUgT3duZXIgcm9sZSBpbiB5b3VyIG9yZ2FuaXphdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIG1vZGVsIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5kZWxldGVNb2RlbChtb2RlbCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGRvd25sb2FkRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5kb3dubG9hZEZpbGUoZmlsZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSAobm9uLWZpbmV0dW5lZCkgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgbGlzdEVuZ2luZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmxpc3RFbmdpbmVzKG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBsaXN0IG9mIGZpbGVzIHRoYXQgYmVsb25nIHRvIHRoZSB1c2VyXFwncyBvcmdhbml6YXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBsaXN0RmlsZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmxpc3RGaWxlcyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBHZXQgZmluZS1ncmFpbmVkIHN0YXR1cyB1cGRhdGVzIGZvciBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbmVUdW5lSWQgVGhlIElEIG9mIHRoZSBmaW5lLXR1bmUgam9iIHRvIGdldCBldmVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0cmVhbV0gV2hldGhlciB0byBzdHJlYW0gZXZlbnRzIGZvciB0aGUgZmluZS10dW5lIGpvYi4gSWYgc2V0IHRvIHRydWUsIGV2ZW50cyB3aWxsIGJlIHNlbnQgYXMgZGF0YS1vbmx5IFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4gVGhlIHN0cmVhbSB3aWxsIHRlcm1pbmF0ZSB3aXRoIGEgJiN4NjA7ZGF0YTogW0RPTkVdJiN4NjA7IG1lc3NhZ2Ugd2hlbiB0aGUgam9iIGlzIGZpbmlzaGVkIChzdWNjZWVkZWQsIGNhbmNlbGxlZCwgb3IgZmFpbGVkKS4gIElmIHNldCB0byBmYWxzZSwgb25seSBldmVudHMgZ2VuZXJhdGVkIHNvIGZhciB3aWxsIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgbGlzdEZpbmVUdW5lRXZlbnRzKGZpbmVUdW5lSWQsIHN0cmVhbSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmxpc3RGaW5lVHVuZUV2ZW50cyhmaW5lVHVuZUlkLCBzdHJlYW0sIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IExpc3QgeW91ciBvcmdhbml6YXRpb25cXCdzIGZpbmUtdHVuaW5nIGpvYnNcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGxpc3RGaW5lVHVuZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmxpc3RGaW5lVHVuZXMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGxpc3RNb2RlbHMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmxpc3RNb2RlbHMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBpdCBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmVJZCBUaGUgSUQgb2YgdGhlIGVuZ2luZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICByZXRyaWV2ZUVuZ2luZShlbmdpbmVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnJldHJpZXZlRW5naW5lKGVuZ2luZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgcmV0cmlldmVGaWxlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IEdldHMgaW5mbyBhYm91dCB0aGUgZmluZS10dW5lIGpvYi4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbmVUdW5lSWQgVGhlIElEIG9mIHRoZSBmaW5lLXR1bmUgam9iXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICByZXRyaWV2ZUZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5yZXRyaWV2ZUZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZGVsIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBwZXJtaXNzaW9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBUaGUgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICByZXRyaWV2ZU1vZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikucmV0cmlldmVNb2RlbChtb2RlbCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5PcGVuQUlBcGkgPSBPcGVuQUlBcGk7XG4iLCAiLyogZXNsaW50LWVudiBicm93c2VyICovXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnID8gc2VsZi5Gb3JtRGF0YSA6IHdpbmRvdy5Gb3JtRGF0YTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBPcGVuQUkgQVBJXG4gKiBBUElzIGZvciBzYW1wbGluZyBmcm9tIGFuZCBmaW5lLXR1bmluZyBsYW5ndWFnZSBtb2RlbHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMS4zLjBcbiAqXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUoXCIuLi9wYWNrYWdlLmpzb25cIik7XG5jbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbSA9IHt9KSB7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gcGFyYW0uYXBpS2V5O1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbiA9IHBhcmFtLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHBhcmFtLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcGFyYW0ucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBwYXJhbS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHBhcmFtLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLmJhc2VPcHRpb25zID0gcGFyYW0uYmFzZU9wdGlvbnM7XG4gICAgICAgIHRoaXMuZm9ybURhdGFDdG9yID0gcGFyYW0uZm9ybURhdGFDdG9yO1xuICAgICAgICBpZiAoIXRoaXMuYmFzZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2VPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHsgJ1VzZXItQWdlbnQnOiBgT3BlbkFJL05vZGVKUy8ke3BhY2thZ2VKc29uLnZlcnNpb259YCwgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCB9LCB0aGlzLmJhc2VPcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICBpZiAodGhpcy5vcmdhbml6YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVyc1snT3BlbkFJLU9yZ2FuaXphdGlvbiddID0gdGhpcy5vcmdhbml6YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmZvcm1EYXRhQ3Rvcikge1xuICAgICAgICAgICAgdGhpcy5mb3JtRGF0YUN0b3IgPSByZXF1aXJlKFwiZm9ybS1kYXRhXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBnaXZlbiBNSU1FIGlzIGEgSlNPTiBNSU1FLlxuICAgICAqIEpTT04gTUlNRSBleGFtcGxlczpcbiAgICAgKiAgIGFwcGxpY2F0aW9uL2pzb25cbiAgICAgKiAgIGFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGOFxuICAgICAqICAgQVBQTElDQVRJT04vSlNPTlxuICAgICAqICAgYXBwbGljYXRpb24vdm5kLmNvbXBhbnkranNvblxuICAgICAqIEBwYXJhbSBtaW1lIC0gTUlNRSAoTXVsdGlwdXJwb3NlIEludGVybmV0IE1haWwgRXh0ZW5zaW9ucylcbiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGdpdmVuIE1JTUUgaXMgSlNPTiwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGlzSnNvbk1pbWUobWltZSkge1xuICAgICAgICBjb25zdCBqc29uTWltZSA9IG5ldyBSZWdFeHAoJ14oYXBwbGljYXRpb25cXC9qc29ufFteOy8gXFx0XStcXC9bXjsvIFxcdF0rWytdanNvbilbIFxcdF0qKDsuKik/JCcsICdpJyk7XG4gICAgICAgIHJldHVybiBtaW1lICE9PSBudWxsICYmIChqc29uTWltZS50ZXN0KG1pbWUpIHx8IG1pbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvbicpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IENvbmZpZ3VyYXRpb247XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogT3BlbkFJIEFQSVxuICogQVBJcyBmb3Igc2FtcGxpbmcgZnJvbSBhbmQgZmluZS10dW5pbmcgbGFuZ3VhZ2UgbW9kZWxzXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDEuMy4wXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FwaVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uZmlndXJhdGlvblwiKSwgZXhwb3J0cyk7XG4iLCBudWxsLCAiaW1wb3J0IHtcbiAgQXBwLFxuICBFZGl0b3IsXG4gIE1hcmtkb3duVmlldyxcbiAgTW9kYWwsXG4gIE5vdGljZSxcbiAgUGx1Z2luLFxuICBQbHVnaW5TZXR0aW5nVGFiLFxuICBTZXR0aW5nLFxuICBNZW51LFxuICBNZW51SXRlbSxcbiAgTWFya2Rvd25GaWxlSW5mbyxcbiAgVEZpbGUsXG4gIFRBYnN0cmFjdEZpbGUsXG4gIHJlcXVlc3QsXG4gIG1vbWVudCxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBXaXphcmRWaWV3LCBXSVpBUkRfVklFVyB9IGZyb20gXCJ2aWV3XCI7XG5pbXBvcnQgeyBUZXh0SW5wdXRNb2RhbCB9IGZyb20gXCJtb2RhbFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG4vL2ltcG9ydCB7ZnN9IGZyb20gJ2ZzJ1xuLy9pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuY29uc3QgeyBDb25maWd1cmF0aW9uLCBPcGVuQUlBcGkgfSA9IHJlcXVpcmUoXCJvcGVuYWlcIik7XG5cbmxldCBweXRob25QYXRoID0gXCJcIjtcbmxldCBzY3JpcHRQYXRoX0FJID0gXCJcIjtcbmxldCBvcGVuYWlBUElLZXkgPSBcIlwiO1xubGV0IHBpbmVjb25lQVBJS2V5ID0gXCJcIjtcbmxldCBwaW5lY29uZUluZGV4TmFtZSA9IFwiXCI7XG5sZXQgcGluZWNvbmVFbnZOYW1lID0gXCJ1cy1lYXN0MS1nY3BcIjtcblxuYXN5bmMgZnVuY3Rpb24gbGF1bmNoX3B5dGhvbihcbiAgcHl0aG9uUGF0aDogc3RyaW5nLFxuICBzY3JpcHRQYXRoOiBzdHJpbmcsXG4gIHNjcmlwdE5hbWU6IHN0cmluZyxcbiAgYXJnczogYW55XG4pIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbGF1bmNoZXMgYSBweXRob24gc2NyaXB0IHdpdGggdGhlIGNvcnJlY3QgcHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnQgYW5kIHJldHVybnMgd2hhdGV2ZXIgdGhlIHB5dGhvbiBzY3JpcHQgcHJpbnRzISEgKG5vIHZhbHVlIHBhc3NpbmcsIHRha2UgY2FyZSlcbiAgICovXG4gIGxldCB7IFB5dGhvblNoZWxsIH0gPSByZXF1aXJlKFwicHl0aG9uLXNoZWxsXCIpO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1vZGU6IFwidGV4dFwiLFxuICAgIHB5dGhvblBhdGg6IHB5dGhvblBhdGgsXG4gICAgc2NyaXB0UGF0aDogc2NyaXB0UGF0aCxcbiAgICBhcmdzOiBhcmdzLFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgUHl0aG9uU2hlbGwucnVuKHNjcmlwdE5hbWUsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnI6IEVycm9yLCByZXN1bHRzOiBhbnkpIHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdHMpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaWxlX3JlYWR5X2Zvcl9oYXNodGFncyhmaWxlX2NvbnRlbnQ6IHN0cmluZykge1xuICByZXR1cm4gZmlsZV9jb250ZW50LmluY2x1ZGVzKFwiI0FkZEhhc2h0YWdzXCIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBoYXNodGFnX2dlbmVyYXRvcihmaWxlX3BhdGg6IHN0cmluZywgc2NyaXB0TmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoX0FJO1xuXG4gIHZhciBhcmdzID0gW2ZpbGVfcGF0aCwgb3BlbmFpQVBJS2V5XTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxhdW5jaF9weXRob24oXG4gICAgcHl0aG9uUGF0aCxcbiAgICBzY3JpcHRQYXRoLFxuICAgIHNjcmlwdE5hbWUsXG4gICAgYXJnc1xuICApO1xuXG4gIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5mdW5jdGlvbiBzYXZlX2pzb24oZmlsZV9wYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IGFueSkge1xuICBjb25zdCBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7XG4gIGZzLndyaXRlRmlsZShmaWxlX3BhdGgsIGpzb25TdHJpbmcsIChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzYXZpbmcgdGhlIGZpbGU6ICR7ZXJyfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIkZpbGUgaGFzIGJlZW4gY3JlYXRlZFwiKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZF90b19qc29uKGZpbGVfcGF0aDogc3RyaW5nLCBrZXk6IGFueSwgdmFsdWU6IGFueSkge1xuICBmcy5yZWFkRmlsZShmaWxlX3BhdGgsIChlcnIsIGRhdGE6IGFueSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBsZXQgb2xkRGF0YTtcbiAgICB0cnkge1xuICAgICAgb2xkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIGZpbGUgaXMgZW1wdHksIGRhdGEgd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcsXG4gICAgICAvLyB3aGljaCB3aWxsIGNhdXNlIEpTT04ucGFyc2UoKSB0byB0aHJvdyBhbiBlcnJvci5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgd2Ugc2V0IG9sZERhdGEgdG8gYW4gZW1wdHkgb2JqZWN0LlxuICAgICAgb2xkRGF0YSA9IHt9O1xuICAgIH1cbiAgICBvbGREYXRhW2tleV0gPSB2YWx1ZTsgLy97J2NoYW5nZV90eXBlJzogRmlsZVR5cGUubW9kaWZpZWQsICdmdWxsX3BhdGgnOiBmaWxlX3BhdGh9XG4gICAgY29uc3QgdXBkYXRlZEpzb24gPSBKU09OLnN0cmluZ2lmeShvbGREYXRhKTtcbiAgICBmcy53cml0ZUZpbGUoZmlsZV9wYXRoLCB1cGRhdGVkSnNvbiwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICAgICAgLy9jb25zb2xlLmxvZygnRGF0YSBhcHBlbmRlZCB0byBmaWxlJylcbiAgICB9KTtcbiAgfSk7XG59XG5cbmVudW0gRmlsZVR5cGUge1xuICBtb2RpZmllZCA9IFwibW9kaWZpZWRcIixcbiAgZGVsZXRlZCA9IFwiZGVsZXRlZFwiLFxuICBuZXcgPSBcIm5ld1wiLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWQ1dpemFyZFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzOiBCdXRsZXJTZXR0aW5ncztcbiAgc3RhdHVzOiBIVE1MRWxlbWVudDtcblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICB0aGlzLnN0YXR1cyA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xuXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoV0laQVJEX1ZJRVcsIChsZWFmKSA9PiBuZXcgV2l6YXJkVmlldyhsZWFmKSk7XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcbiAgICAgIHRoaXMudXBkYXRlVmlldyhbXSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIGlzIGxvYWRpbmcuLi5cIik7XG4gICAgdGhpcy5zdGF0dXMuc2V0QXR0cihcInRpdGxlXCIsIFwiV2l6YXJkIGlzIGxvYWRpbmcuLi4uXCIpO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcImluZGV4LXZhdWx0XCIsXG4gICAgICBuYW1lOiBcIkluZGV4IFZhdWx0XCIsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5pbmRleF92YXVsdCgpLFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJpbmRleC1jaGFuZ2VkLWZpbGVzXCIsXG4gICAgICBuYW1lOiBcIlJlaW5kZXggTmV3L0NoYW5nZWQgRmlsZXMgT25seVwiLFxuICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuaW5kZXhfbmV3X2FuZF9tb2RpZmllZF9maWxlcygpLFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJmaW5kLXNpbWlsYXItaWRlYXNcIixcbiAgICAgIG5hbWU6IFwiRmluZCBTaW1pbGFyIElkZWFzXCIsXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvciwgdmlldykgPT4gdGhpcy5maW5kX3NpbWlsYXJfaWRlYXMoZWRpdG9yLCB2aWV3KSxcbiAgICB9KTtcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwiaGFzaHRhZy1nZW5lcmF0b3JcIixcbiAgICAgIG5hbWU6IFwiQWRkIEhhc2h0YWdzIHRvICNBZGRIYXNodGFncyBGaWxlc1wiLFxuICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuYWRkX2hhc2h0YWdzKHRoaXMuc3RhdHVzKSxcbiAgICB9KTtcblxuICAgIC8vcmVpbmRleCB2YXVsdCBldmVyeSA1IGhvdXJzXG4gICAgdGhpcy5yZWdpc3RlckludGVydmFsKFxuICAgICAgd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWluZGV4aW5nIHRoZSB2YXVsdCBhdDpcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKG1vbWVudCgpLmZvcm1hdChcIkg6bW06c3NcIikpO1xuICAgICAgICB0aGlzLmluZGV4X25ld19hbmRfbW9kaWZpZWRfZmlsZXMoKTtcbiAgICAgIH0sIDFlNiAqIDIpXG4gICAgKTsgLy8gd2UgcmVpbmRleCB0aGUgbmV3IGZpbGVzIGV2ZXJ5IDYgaG91cnNcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFZDV2l6YXJkU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwibW9kaWZ5XCIsIChmaWxlKSA9PlxuICAgICAgICB0aGlzLnJlZ2lzdGVyX2ZpbGVfY2hhbmdlKGZpbGUsIEZpbGVUeXBlLm1vZGlmaWVkKVxuICAgICAgKVxuICAgICk7XG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAudmF1bHQub24oXCJkZWxldGVcIiwgKGZpbGUpID0+XG4gICAgICAgIHRoaXMucmVnaXN0ZXJfZmlsZV9jaGFuZ2UoZmlsZSwgRmlsZVR5cGUuZGVsZXRlZClcbiAgICAgIClcbiAgICApO1xuXG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCByZWFkeVwiKTtcbiAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJXaXphcmQgaXMgcmVhZHlcIik7XG5cbiAgICAvL1doZW4geW91IHN0YXJ0IGEgbmV3IHZhdWx0LCBhbGwgZmlsZXMgYXJlIGNvbnNpZGVyZWQgYXMgXCJjcmVhdGVkXCIsIHdlIHVzZSB0aGlzIGRlbGF5IHRvIGF2b2lkIHRoaXMgcHJvYmxlbSBhbmQgaGF2ZSBvbmx5IG5ldyBzeW5jZWQgZmlsZXMgZnJvbSBSZWFkd2lzZSBsYWJlbGxlZCBhcyBuZXdcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVnaXN0ZXJDcmVhdGVkRmlsZSgpO1xuICAgIH0sIDUwMCk7XG4gIH1cblxuICByZWdpc3RlckNyZWF0ZWRGaWxlKCkge1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwiY3JlYXRlXCIsIChmaWxlKSA9PlxuICAgICAgICB0aGlzLnJlZ2lzdGVyX2ZpbGVfY2hhbmdlKGZpbGUsIEZpbGVUeXBlLm5ldylcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShXSVpBUkRfVklFVyk7XG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCBsZWZ0XCIpO1xuICAgIHRoaXMuc3RhdHVzLnNldEF0dHIoXCJ0aXRsZVwiLCBcIldpemFyZCBzYXlzIFx1RDgzRFx1REM0QlwiKTtcbiAgfVxuXG4gIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKFdJWkFSRF9WSUVXKTtcblxuICAgIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpLnNldFZpZXdTdGF0ZSh7XG4gICAgICB0eXBlOiBXSVpBUkRfVklFVyxcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShXSVpBUkRfVklFVylbMF1cbiAgICApO1xuICB9XG4gIGFzeW5jIHVwZGF0ZVZpZXcocmVzdWx0czogYW55KSB7XG4gICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoV0laQVJEX1ZJRVcpWzBdPy52aWV3O1xuICAgIGlmICh2aWV3IGluc3RhbmNlb2YgV2l6YXJkVmlldykge1xuICAgICAgdmlldy51cGRhdGUocmVzdWx0cyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIHNjcmlwdFBhdGhfQUkgPVxuICAgICAgdGhpcy5zZXR0aW5ncy52YXVsdFBhdGggKyBcIi5vYnNpZGlhbi9wbHVnaW5zL2tub3dsZWRnZS13aXphcmRcIjtcbiAgICBvcGVuYWlBUElLZXkgPSB0aGlzLnNldHRpbmdzLm9wZW5BSUtleTtcbiAgICBwaW5lY29uZUFQSUtleSA9IHRoaXMuc2V0dGluZ3MucGluZWNvbmVLZXk7XG4gICAgcGluZWNvbmVJbmRleE5hbWUgPSB0aGlzLnNldHRpbmdzLnBpbmVjb25lSW5kZXhOYW1lO1xuICAgIHBpbmVjb25lRW52TmFtZSA9IHRoaXMuc2V0dGluZ3MucGluZWNvbmVFbnY7XG5cbiAgICBweXRob25QYXRoID0gdGhpcy5zZXR0aW5ncy5weXRob25QYXRoO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgc2NyaXB0UGF0aF9BSSA9XG4gICAgICB0aGlzLnNldHRpbmdzLnZhdWx0UGF0aCArIFwiLm9ic2lkaWFuL3BsdWdpbnMva25vd2xlZGdlLXdpemFyZFwiO1xuICAgIG9wZW5haUFQSUtleSA9IHRoaXMuc2V0dGluZ3Mub3BlbkFJS2V5O1xuICAgIHBpbmVjb25lRW52TmFtZSA9IHRoaXMuc2V0dGluZ3MucGluZWNvbmVFbnY7XG4gICAgcGluZWNvbmVBUElLZXkgPSB0aGlzLnNldHRpbmdzLnBpbmVjb25lS2V5O1xuICAgIHBpbmVjb25lSW5kZXhOYW1lID0gdGhpcy5zZXR0aW5ncy5waW5lY29uZUluZGV4TmFtZTtcblxuICAgIHB5dGhvblBhdGggPSB0aGlzLnNldHRpbmdzLnB5dGhvblBhdGg7XG4gIH1cblxuICBhc3luYyBhZGRfaGFzaHRhZ3Moc3RhdHVzOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIHN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIGFkZGluZyBIYXNodGFncy4uLlwiKTtcbiAgICBzdGF0dXMuc2V0QXR0cihcInRpdGxlXCIsIFwiV2l6YXJkIGlzIGFkZGluZyBIYXNodGFncy4uLlwiKTtcbiAgICBmb3IgKGxldCBpdGVtIG9mIGZpbGVzKSB7XG4gICAgICBsZXQgZmlsZV9jb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChpdGVtKTtcbiAgICAgIGlmIChmaWxlX3JlYWR5X2Zvcl9oYXNodGFncyhmaWxlX2NvbnRlbnQpKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYEFkZGluZyBIYXNodGFncyB0bzogJHtpdGVtLmJhc2VuYW1lfWApO1xuICAgICAgICBsZXQgc2NyaXB0TmFtZSA9IFwiaGFzaHRhZ19nZW5lcmF0b3IucHlcIjtcbiAgICAgICAgbGV0IHZhdWx0X3BhdGggPSB0aGlzLnNldHRpbmdzLnZhdWx0UGF0aDtcbiAgICAgICAgbGV0IGZpbGVfcGF0aCA9IGl0ZW0ucGF0aDtcbiAgICAgICAgbGV0IGZ1bGxfcGF0aCA9IHZhdWx0X3BhdGggKyBmaWxlX3BhdGg7XG4gICAgICAgIGxldCByZXNwb25zZTogYW55ID0gYXdhaXQgaGFzaHRhZ19nZW5lcmF0b3IoZnVsbF9wYXRoLCBzY3JpcHROYW1lKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZSlcbiAgICAgICAgLy90aGlzLmFwcC52YXVsdC5tb2RpZnkoaXRlbSwgcmVzcG9uc2UpXG4gICAgICB9XG4gICAgfVxuICAgIG5ldyBOb3RpY2UoXCJEb25lIVwiKTtcbiAgICBzdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCByZWFkeVwiKTtcbiAgICBzdGF0dXMuc2V0QXR0cihcInRpdGxlXCIsIFwiV2l6YXJkIGlzIHJlYWR5XCIpO1xuICB9XG5cbiAgYXN5bmMgZmluZF9zaW1pbGFyX2lkZWFzKFxuICAgIGVkaXRvcjogRWRpdG9yLFxuICAgIHZpZXc6IE1hcmtkb3duVmlldyB8IE1hcmtkb3duRmlsZUluZm9cbiAgKSB7XG4gICAgY29uc3Qgc2VsID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgIG5ldyBOb3RpY2UoXCJTZWFyY2ggaW4gcHJvZ3Jlc3MuLi5cIik7XG4gICAgbGV0IHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoX0FJO1xuICAgIGNvbnN0IHNjcmlwdE5hbWUgPSBcInNpbWlsYXJfaWRlYXNfcGluZWNvbmUucHlcIjsgLy8nc2ltaWxhcl9pZGVhcy5weSdcblxuICAgIHZhciBhcmdzID0gW1xuICAgICAgc2VsLFxuICAgICAgb3BlbmFpQVBJS2V5LFxuICAgICAgdGhpcy5zZXR0aW5ncy52YXVsdFBhdGgsXG4gICAgICBwaW5lY29uZUFQSUtleSxcbiAgICAgIHBpbmVjb25lSW5kZXhOYW1lLFxuICAgICAgcGluZWNvbmVFbnZOYW1lLFxuICAgIF07XG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOSBcdUQ4M0RcdUREMEU6IEtub3dsZWRnZSBXaXphcmQgc2VhcmNoaW5nLi4uXCIpO1xuICAgIHRoaXMuc3RhdHVzLnNldEF0dHIoXCJ0aXRsZVwiLCBcIldpemFyZCBpcyBzZWFyY2hpbmcgZm9yIHNpbWlsYXIgaWRlYXNcIik7XG5cbiAgICBjb25zdCBzaW1pbGFyX2lkZWFzID0gKGF3YWl0IGxhdW5jaF9weXRob24oXG4gICAgICBweXRob25QYXRoLFxuICAgICAgc2NyaXB0UGF0aCxcbiAgICAgIHNjcmlwdE5hbWUsXG4gICAgICBhcmdzXG4gICAgKSkgYXMgYW55O1xuXG4gICAgY29uc29sZS5sb2coc2ltaWxhcl9pZGVhc1swXSk7XG4gICAgbGV0IGRpY3QgPSBKU09OLnBhcnNlKHNpbWlsYXJfaWRlYXNbMF0pO1xuXG4gICAgbGV0IHNlYXJjaF9yZXN1bHRzID0gYXdhaXQgdGhpcy5leHRyYWN0X3RpdGxlX2FuZF9wYXRoX2pzb24oZGljdCk7XG5cbiAgICB0aGlzLnVwZGF0ZVZpZXcoc2VhcmNoX3Jlc3VsdHMpO1xuXG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCByZWFkeVwiKTtcbiAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJXaXphcmQgaXMgcmVhZHlcIik7XG4gIH1cblxuICBhc3luYyByZWdpc3Rlcl9maWxlX2NoYW5nZShmaWxlOiBUQWJzdHJhY3RGaWxlLCB0eXBlOiBGaWxlVHlwZSkge1xuICAgIGNvbnN0IHBsdWdpbl9wYXRoID0gc2NyaXB0UGF0aF9BSTtcbiAgICBsZXQgYmFzZV9uYW1lID0gZmlsZS5uYW1lLnNwbGl0KFwiLm1kXCIpWzBdO1xuICAgIGxldCBmaWxlX3BhdGggPSB0aGlzLnNldHRpbmdzLnZhdWx0UGF0aCArIGZpbGUucGF0aDtcblxuICAgIGxldCBzdG9yYWdlX3BhdGggPSBwbHVnaW5fcGF0aCArIFwiL21vZGlmaWVkX3BhdGhzLmpzb25cIjtcblxuICAgIGlmICh0eXBlID09IEZpbGVUeXBlLm1vZGlmaWVkKSB7XG4gICAgICBsZXQgdmFsdWUgPSB7IGNoYW5nZV90eXBlOiBGaWxlVHlwZS5tb2RpZmllZCwgZnVsbF9wYXRoOiBmaWxlX3BhdGggfTtcbiAgICAgIGFwcGVuZF90b19qc29uKHN0b3JhZ2VfcGF0aCwgYmFzZV9uYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IEZpbGVUeXBlLmRlbGV0ZWQpIHtcbiAgICAgIG5ldyBOb3RpY2UoYCR7YmFzZV9uYW1lfSBoYXMgYmVlbiBkZWxldGVkYCk7XG4gICAgICBsZXQgdmFsdWUgPSB7IGNoYW5nZV90eXBlOiBGaWxlVHlwZS5kZWxldGVkLCBmdWxsX3BhdGg6IGZpbGVfcGF0aCB9O1xuICAgICAgYXBwZW5kX3RvX2pzb24oc3RvcmFnZV9wYXRoLCBiYXNlX25hbWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvL1dlIHRyYWNrIGEgbmV3IGNyZWF0ZWQgZmlsZSBvbmx5IGlmIGlzIGZyb20gcmVhZHdpc2VcbiAgICBlbHNlIGlmICh0eXBlID09IEZpbGVUeXBlLm5ldykge1xuICAgICAgY29uc29sZS5sb2coYE5ldyBGaWxlOiAke2ZpbGVfcGF0aH1gKTtcbiAgICAgIGlmIChmaWxlX3BhdGguY29udGFpbnMoXCJSZWFkd2lzZVwiKSkge1xuICAgICAgICBuZXcgTm90aWNlKGAke2Jhc2VfbmFtZX0gaGFzIGJlZW4gY3JlYXRlZGApO1xuICAgICAgICBsZXQgdmFsdWUgPSB7IGNoYW5nZV90eXBlOiBGaWxlVHlwZS5uZXcsIGZ1bGxfcGF0aDogZmlsZV9wYXRoIH07XG4gICAgICAgIGFwcGVuZF90b19qc29uKHN0b3JhZ2VfcGF0aCwgYmFzZV9uYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIGluZGV4X25ld19hbmRfbW9kaWZpZWRfZmlsZXMoKSB7XG4gICAgY29uc3QgcGx1Z2luX3BhdGggPSBzY3JpcHRQYXRoX0FJO1xuICAgIGxldCBzdG9yYWdlX3BhdGggPSBwbHVnaW5fcGF0aCArIFwiL21vZGlmaWVkX3BhdGhzLmpzb25cIjtcbiAgICBmcy5yZWFkRmlsZShzdG9yYWdlX3BhdGgsIGFzeW5jIChlcnIsIGRhdGE6IGFueSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlc190b19tb2RpZnk7XG4gICAgICBuZXcgTm90aWNlKFwiUmVpbmRleGluZyBjaGFuZ2VkIGZpbGVzLi5cIik7XG4gICAgICB0aGlzLnN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIGluZGV4aW5nLi4uXCIpO1xuICAgICAgdGhpcy5zdGF0dXMuc2V0QXR0cihcInRpdGxlXCIsIFwiV2l6YXJkIGlzIGluZGV4aW5nIHlvdXIgdmF1bHQuLi5cIik7XG4gICAgICB0cnkge1xuICAgICAgICBmaWxlc190b19tb2RpZnkgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZyhmaWxlc190b19tb2RpZnkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBuZXcgTm90aWNlKFwiTm8gbmV3IG5vdGVzIHRvIGluZGV4XCIpO1xuICAgICAgICB0aGlzLnN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIHJlYWR5XCIpO1xuICAgICAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJLbm93bGVkZ2UgV2l6YXJkIGlzIHJlYWR5XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMoZmlsZXNfdG9fbW9kaWZ5KS5sZW5ndGggPCAxKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJObyBuZXcgbm90ZXMgdG8gaW5kZXhcIik7XG4gICAgICAgIHRoaXMuc3RhdHVzLnNldFRleHQoXCJcdUQ4M0VcdURERDk6IEtub3dsZWRnZSBXaXphcmQgcmVhZHlcIik7XG4gICAgICAgIHRoaXMuc3RhdHVzLnNldEF0dHIoXCJ0aXRsZVwiLCBcIktub3dsZWRnZSBXaXphcmQgaXMgcmVhZHlcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbmRleF9sb29wKGZpbGVzX3RvX21vZGlmeSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJUaGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgaW5kZXhpbmchXCIpO1xuICAgICAgICB0aGlzLnN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIHJlYWR5XCIpO1xuICAgICAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJLbm93bGVkZ2UgV2l6YXJkIGlzIHJlYWR5XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5ldyBOb3RpY2UoXCJGaW5pc2hlZCBpbmRleGluZyFcIik7XG4gICAgICB0aGlzLnN0YXR1cy5zZXRUZXh0KFwiXHVEODNFXHVEREQ5OiBLbm93bGVkZ2UgV2l6YXJkIHJlYWR5XCIpO1xuICAgICAgdGhpcy5zdGF0dXMuc2V0QXR0cihcInRpdGxlXCIsIFwiS25vd2xlZGdlIFdpemFyZCBpcyByZWFkeVwiKTtcbiAgICAgIHNhdmVfanNvbihzdG9yYWdlX3BhdGgsIGZpbGVzX3RvX21vZGlmeSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBpbmRleF92YXVsdCgpIHtcbiAgICAvL0Z1bmN0aW9uIHRvIGluZGV4IHRoZSBmdWxsIHZhdWx0IGZyb20gc2NyYXRjaFxuXG4gICAgbGV0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGxldCBmaWxlX3BhdGhzOiBhbnkgPSB7fTtcbiAgICBsZXQgdmF1bHRfcGF0aCA9IHRoaXMuc2V0dGluZ3MudmF1bHRQYXRoO1xuICAgIGNvbnN0IHBsdWdpbl9wYXRoID0gc2NyaXB0UGF0aF9BSTtcbiAgICBuZXcgTm90aWNlKFwiU3RhcnRlZCBpbmRleGluZyB0aGUgZnVsbCB2YXVsdCFcIik7XG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCBpbmRleGluZy4uLlwiKTtcbiAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJXaXphcmQgaXMgaW5kZXhpbmcgeW91ciB2YXVsdC4uLlwiKTtcblxuICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIGxldCBsb3dlcl9jYXNlX2ZpbGVfcGF0aCA9IGZpbGUucGF0aC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgIGxvd2VyX2Nhc2VfZmlsZV9wYXRoLmluY2x1ZGVzKFwicHJvamVjdHNcIikgfHxcbiAgICAgICAgICBsb3dlcl9jYXNlX2ZpbGVfcGF0aC5pbmNsdWRlcyhcImNhbnZhc1wiKSB8fFxuICAgICAgICAgIGxvd2VyX2Nhc2VfZmlsZV9wYXRoLmluY2x1ZGVzKFwicmVzb3VyY2VzXCIpIHx8XG4gICAgICAgICAgbG93ZXJfY2FzZV9maWxlX3BhdGguaW5jbHVkZXMoXCJ0ZW1wbGF0ZXNcIikgfHxcbiAgICAgICAgICBsb3dlcl9jYXNlX2ZpbGVfcGF0aC5pbmNsdWRlcyhcIi5qcGdcIilcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGZpbGVfcGF0aHNbZmlsZS5iYXNlbmFtZV0gPSB7XG4gICAgICAgICAgY2hhbmdlX3R5cGU6IEZpbGVUeXBlLm5ldyxcbiAgICAgICAgICBmdWxsX3BhdGg6IHZhdWx0X3BhdGggKyBmaWxlLnBhdGgsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBGaWxlcyBsZW5ndGg6ICR7ZmlsZV9wYXRocy5sZW5ndGh9YCk7XG4gICAgY29uc3QganNvbl9wYXRoID0gcGx1Z2luX3BhdGggKyBcIi9cIiArIFwiZmlsZV9wYXRocy5qc29uXCI7XG5cbiAgICBzYXZlX2pzb24oanNvbl9wYXRoLCBmaWxlX3BhdGhzKTtcblxuICAgIGF3YWl0IHRoaXMuaW5kZXhfbG9vcChmaWxlX3BhdGhzKTtcblxuICAgIG5ldyBOb3RpY2UoXCJGaW5pc2hlZCBpbmRleGluZyFcIik7XG4gICAgdGhpcy5zdGF0dXMuc2V0VGV4dChcIlx1RDgzRVx1REREOTogS25vd2xlZGdlIFdpemFyZCByZWFkeVwiKTtcbiAgICB0aGlzLnN0YXR1cy5zZXRBdHRyKFwidGl0bGVcIiwgXCJLbm93bGVkZ2UgV2l6YXJkIGlzIHJlYWR5XCIpO1xuXG4gICAgc2F2ZV9qc29uKGpzb25fcGF0aCwgZmlsZV9wYXRocyk7XG4gIH1cblxuICAvL0luZGV4aW5nIHRvIHBpbmVjb25kZSBtZXRob2RzXG4gIGFzeW5jIGluZGV4X2ZpbGUoXG4gICAgZmlsZV9wYXRoOiBzdHJpbmcsXG4gICAgbW9kaWZpY2F0aW9uX3R5cGU6IHN0cmluZyxcbiAgICBmaWxlX25hbWU6IHN0cmluZ1xuICApIHtcbiAgICBsZXQgbm90ZV90ZXh0ID0gXCJcIjtcbiAgICB0cnkge1xuICAgICAgbm90ZV90ZXh0ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVfcGF0aCwgXCJ1dGY4XCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChtb2RpZmljYXRpb25fdHlwZSA9PSBcImRlbGV0ZWRcIikge1xuICAgICAgICBub3RlX3RleHQgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgICAgICAgbmV3IE5vdGljZShgJHtmaWxlX25hbWV9IGNhbiBub3QgYmUgcmVhZCFgKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoYCR7ZmlsZV9uYW1lfSBjYW4gbm90IGJlIHJlYWQhYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgICAgXCJodHRwczovL3BpbmVjb25lLWluZGV4ZXIteG01bG1kbnN4cS1leS5hLnJ1bi5hcHAvaW5kZXhcIixcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZmlsZV9uYW1lOiBmaWxlX25hbWUsXG4gICAgICAgICAgbm90ZTogbm90ZV90ZXh0LFxuICAgICAgICB9KSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgdCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgcmVzLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICBuZXcgTm90aWNlKGBJbmRleGVkIFN1Y2Nlc3NmdWxseTogJHtmaWxlX25hbWV9ICFgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IE5vdGljZShgU2VydmVyIGVycm9yIHdoaWxlIGluZGV4aW5nICR7ZmlsZV9uYW1lfSBgKTtcbiAgICAgIHRocm93IEVycm9yKGBTZXJ2ZXIgZXJyb3Igd2hpbGUgaW5kZXhpbmcgJHtmaWxlX25hbWV9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaW5kZXhfbG9vcChmaWxlc19kaWN0OiBhbnkpIHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IG51bWJlcl9vZl9maWxlcyA9IE9iamVjdC5lbnRyaWVzKGZpbGVzX2RpY3QpLmxlbmd0aDtcblxuICAgIGZvciAobGV0IFtmaWxlX25hbWUsIGZpbGVfZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoZmlsZXNfZGljdCkgYXMgW1xuICAgICAgYW55LFxuICAgICAgYW55XG4gICAgXSkge1xuICAgICAgbmV3IE5vdGljZShgJHtjb3VudGVyfS8ke251bWJlcl9vZl9maWxlc30gaGFzIGJlZW4gaW5kZXhlZGApO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhmaWxlX25hbWUpO1xuICAgICAgICBuZXcgTm90aWNlKGBJbmRleGluZzogJHtmaWxlX25hbWV9Li4uYCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5pbmRleF9maWxlKFxuICAgICAgICAgIGZpbGVfZGF0YVtcImZ1bGxfcGF0aFwiXSxcbiAgICAgICAgICBmaWxlX2RhdGFbXCJjaGFuZ2VfdHlwZVwiXSxcbiAgICAgICAgICBmaWxlX25hbWVcbiAgICAgICAgKTtcblxuICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgICAgIGRlbGV0ZSBmaWxlc19kaWN0W2ZpbGVfbmFtZV07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICAgIG5ldyBOb3RpY2UoZS5tZXNzYWdlKTtcbiAgICAgICAgaWYgKGZpbGVfZGF0YVtcImNoYW5nZV90eXBlXCJdID09IFwiZGVsZXRlZFwiKSB7XG4gICAgICAgICAgZGVsZXRlIGZpbGVzX2RpY3RbZmlsZV9uYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4dHJhY3RfdGl0bGVfYW5kX3BhdGhfanNvbihyZXN1bHRzOiBKU09OKSB7XG4gICAgbGV0IGN1cnJuZXRfZmlsZW5hbWUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5iYXNlbmFtZTtcbiAgICBsZXQgc2VhcmNoX3Jlc3VsdHM6IGFueSA9IFtdO1xuICAgIGZvciAobGV0IFtub3RlX3RpdGxlLCBjb250ZW50XSBvZiBPYmplY3QuZW50cmllcyhyZXN1bHRzKSkge1xuICAgICAgaWYgKG5vdGVfdGl0bGUuaW5jbHVkZXMoXCIqKipcIikpIHtcbiAgICAgICAgbm90ZV90aXRsZSA9IG5vdGVfdGl0bGUuc3BsaXQoXCIqKipcIilbMF07XG4gICAgICAgIC8vY29uc29sZS5sb2coYG5vdGVfdGl0bGU6ICR7bm90ZV90aXRsZX1gKVxuICAgICAgfVxuICAgICAgbGV0IHNvdXJjZTogc3RyaW5nID0gbm90ZV90aXRsZTtcblxuICAgICAgaWYgKHNvdXJjZSA9PSBjdXJybmV0X2ZpbGVuYW1lKSB7XG4gICAgICAgIC8vRG8gbm90IGdldCByZXN1bHRzIGZyb20gdGhlIGN1cnJlbnQgZmlsZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBzb3VyY2VfZmlsZSA9IGF3YWl0IHRoaXMuZ2V0X3BhdGhfYnlfbmFtZShzb3VyY2UpO1xuICAgICAgaWYgKHNvdXJjZV9maWxlICE9IG51bGwgJiYgc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgbGV0IG9ic2lkaWFuX3BhdGggPSBcIm9ic2lkaWFuOi8vYWR2YW5jZWQtdXJpP3ZhdWx0PVwiOyAvL29wZW4gLSBhZHZhbmNlZC11cmlcbiAgICAgICAgb2JzaWRpYW5fcGF0aCA9IG9ic2lkaWFuX3BhdGggKyB0aGlzLmFwcC52YXVsdC5nZXROYW1lKCkgKyBcIiZmaWxlcGF0aD1cIjsgLy9maWxlIC0gZmlsZXBhdGhcbiAgICAgICAgLy9sZXQgc291cmNlX3BhdGggPSBzb3VyY2VfZmlsZS5wYXRoIC8vdGhpcy5hcHAudmF1bHQuZ2V0UmVzb3VyY2VQYXRoKHNvdXJjZV9maWxlKVxuICAgICAgICBvYnNpZGlhbl9wYXRoID0gb2JzaWRpYW5fcGF0aCArIHNvdXJjZV9maWxlLnBhdGg7XG4gICAgICAgIC8vY29uc29sZS5sb2coYG15IHNvdXJjZSBwYXRoOiAke29ic2lkaWFuX3BhdGh9YClcbiAgICAgICAgLy90b2RvIEkgc2hvdWxkIG5vdCBzYXZlIHBhdGhzIGluIGEgZGljdCBiZWNhdXNlIEkgY3JlYXRlIHRoZSBvdmVyd3JpdHRpbmcgcHJvYmxlbSBhZ2FpbiBhbmQgY2FuIG5vdCBoYXZlIG11bHRpcGxlIHJlZmVyZW5jZXMgdG8gdGhlIHNhbWUgYXJ0aWNsZSFcbiAgICAgICAgLy90b2RvIG1ha2UgaXQgYW4gYXJyYXkgb2YgZGljdGlvbmFyaWVzLCB0aGF0IHdvdWxkIGJlIHRoZSBiZXN0IG9wdGlvbiEhXG4gICAgICAgIC8vbGV0IHJlc3VsdCA9IHtzb3VyY2U6IHtcInNvdXJjZV9wYXRoXCI6IG9ic2lkaWFuX3BhdGgsIFwidGV4dFwiOiBjb250ZW50fX1cblxuICAgICAgICBsZXQgcmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgICAgIHJlc3VsdFtzb3VyY2VdID0geyBzb3VyY2VfcGF0aDogb2JzaWRpYW5fcGF0aCwgdGV4dDogY29udGVudCB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGByZXN1bHQ6ICR7cmVzdWx0W3NvdXJjZV1bXCJzb3VyY2VfcGF0aFwiXX1gKTtcbiAgICAgICAgc2VhcmNoX3Jlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICAvL3NlYXJjaF9yZXN1bHRzW3NvdXJjZV0gPSB7J3NvdXJjZV9wYXRoJzpvYnNpZGlhbl9wYXRoLCAndGV4dCc6IGNvbnRlbnR9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWFyY2hfcmVzdWx0cztcbiAgfVxuICBhc3luYyBleHRyYWN0X3RpdGxlX2FuZF9wYXRoKHJlc3VsdHM6IHN0cmluZ1tdKSB7XG4gICAgLy90b2RvIGlmIHdlIGNoYW5nZSB0aGUgc291cmNlIHRvIHBpbmVjb25lLCB3ZSBnb3QgbG9uZ2VyIGRvY3VtZW50cyBhbmQgaXQgaXMgbm90IGFueW1vcmUgdGhhdCB0aGUgXCJ0aGlyZCBsaW5lXCIgaXMgdGhlIG5vdGU6dGl0bGVcbiAgICAvL2NvbnNvbGUubG9nKGFsbF9maWxlcylcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHNlYXJjaF9yZXN1bHRzOiBhbnkgPSB7fTsgLy97J3NlbnRlbmNlcyc6IFtdLCAnc291cmNlX25hbWUnOiBbXSwgJ3NvdXJjZV9wYXRoJzogW119XG4gICAgbGV0IGN1cnJlbnRfZmlsZW5hbWUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5iYXNlbmFtZTtcbiAgICBjb25zb2xlLmxvZyhgY3VycmVudCBmaWxlbmFtZTogJHtjdXJyZW50X2ZpbGVuYW1lfWApO1xuICAgIGZvciAobGV0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICBpZiAoY291bnRlciAlIDMgPT0gMCAmJiBjb3VudGVyICE9IDApIHtcbiAgICAgICAgbGV0IHNlbnRlbmNlID0gJ1wiJyArIHJlc3VsdHMuYXQoY291bnRlcikgKyAnXCInO1xuICAgICAgICBsZXQgc291cmNlID0gcmVzdWx0cy5hdChjb3VudGVyICsgMik7XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZT8uc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhgY291bnRlcjogJHtjb3VudGVyfSwgVGhpcyBzb3VyY2U6ICR7c291cmNlfWApO1xuXG4gICAgICAgIGlmIChzb3VyY2UgPT0gY3VycmVudF9maWxlbmFtZSkge1xuICAgICAgICAgIC8vRG8gbm90IGFkZCByZXN1bHRzIGZyb20gdGhlIGN1cnJlbnQgZmlsZVxuICAgICAgICAgIGNvdW50ZXIgPSBjb3VudGVyICsgMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc291cmNlX2ZpbGUgPSBhd2FpdCB0aGlzLmdldF9wYXRoX2J5X25hbWUoc291cmNlKTtcbiAgICAgICAgY29uc29sZS5sb2coc291cmNlX2ZpbGUpO1xuICAgICAgICBpZiAoc291cmNlX2ZpbGUgIT0gbnVsbCAmJiBzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIGxldCBvYnNpZGlhbl9wYXRoID0gXCJvYnNpZGlhbjovL2FkdmFuY2VkLXVyaT92YXVsdD1cIjsgLy9vcGVuIC0gYWR2YW5jZWQtdXJpXG4gICAgICAgICAgb2JzaWRpYW5fcGF0aCA9XG4gICAgICAgICAgICBvYnNpZGlhbl9wYXRoICsgdGhpcy5hcHAudmF1bHQuZ2V0TmFtZSgpICsgXCImZmlsZXBhdGg9XCI7IC8vZmlsZSAtIGZpbGVwYXRoXG4gICAgICAgICAgLy9sZXQgc291cmNlX3BhdGggPSBzb3VyY2VfZmlsZS5wYXRoIC8vdGhpcy5hcHAudmF1bHQuZ2V0UmVzb3VyY2VQYXRoKHNvdXJjZV9maWxlKVxuICAgICAgICAgIG9ic2lkaWFuX3BhdGggPSBvYnNpZGlhbl9wYXRoICsgc291cmNlX2ZpbGUucGF0aDtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgbXkgc291cmNlIHBhdGg6ICR7b2JzaWRpYW5fcGF0aH1gKTtcbiAgICAgICAgICBzZWFyY2hfcmVzdWx0c1tzb3VyY2VdID0ge1xuICAgICAgICAgICAgc291cmNlX3BhdGg6IG9ic2lkaWFuX3BhdGgsXG4gICAgICAgICAgICB0ZXh0OiBzZW50ZW5jZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvdW50ZXIgPSBjb3VudGVyICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIHNlYXJjaF9yZXN1bHRzO1xuICB9XG4gIGFzeW5jIGdldF9wYXRoX2J5X25hbWUoc291cmNlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBsZXQgYWxsX2ZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGZvciAobGV0IGZpbGUgb2YgYWxsX2ZpbGVzKSB7XG4gICAgICBsZXQgZmlsZW5hbWUgPSBmaWxlLmJhc2VuYW1lO1xuICAgICAgaWYgKGZpbGVuYW1lID09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuY2xhc3MgVkNXaXphcmRTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIHBsdWdpbjogVkNXaXphcmRQbHVnaW47XG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFZDV2l6YXJkUGx1Z2luKSB7XG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG4gIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJTZXR0aW5ncyBmb3IgeW91ciBLbm93bGVkZ2UgV2l6YXJkXCIgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiT2JzaWRpYW4gVmF1bHQgUGF0aFwiKVxuICAgICAgLnNldERlc2MoXCJUaGUgcGF0aCB0byB0aGUgdmF1bHQgd2hlcmUgeW91IHdpc2ggdG8gdXNlIHRoZSBwbHVnaW5cIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIgcGF0aFwiKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy52YXVsdFBhdGgpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwYXRoOiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnZhdWx0UGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIk9wZW5BSSBBUEkgS2V5XCIpXG4gICAgICAuc2V0RGVzYyhcIllvdXIgT3BlbkFJIEFQSSBLZXlcIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIga2V5XCIpXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5BSUtleSlcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9wZW4gQUkga2V5OiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5BSUtleSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIlB5dGhvbiBWaXJ0dWFsIEVudmlyb25tZW50IFBhdGhcIilcbiAgICAgIC5zZXREZXNjKFwiVGhlIHBhdGggdG8gcHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnRcIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIgcGF0aFwiKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHl0aG9uUGF0aDogXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiUGluZWNvbmUgQVBJIEtleVwiKVxuICAgICAgLnNldERlc2MoXCJZb3VyIFBpbmVjb25lIEFQSSBLZXlcIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIga2V5XCIpXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBpbmVjb25lS2V5KVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGluZWNvbmUga2V5OiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBpbmVjb25lS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiUGluZWNvbmUgSW5kZXggTmFtZVwiKVxuICAgICAgLnNldERlc2MoXCJZb3VyIFBpbmVjb25lIEluZGV4IE5hbWVcIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIgbmFtZVwiKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5waW5lY29uZUluZGV4TmFtZSlcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBpbmVjb25lIEluZGV4IE5hbWU6IFwiICsgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGluZWNvbmVJbmRleE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoXCJQaW5lY29uZSBFbnZyaW9ubWVudCBOYW1lXCIpXG4gICAgICAuc2V0RGVzYyhcImUuZzogdXMtZWFzdDEtZ2NwXCIpXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgdGV4dFxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkVudGVyIGVudmlyb25tZW50XCIpXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBpbmVjb25lRW52KVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGluZWNvbmUgRW52cmlvbm1lbnQgTmFtZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5waW5lY29uZUVudiA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiTnVtYmVyIG9mIHN1Yi1saW5rcyB0byByZWFkIGZvciBVUkwgUmVzZWFyY2hcIilcbiAgICAgIC5zZXREZXNjKFwiZGVmYXVsdCBpcyA2XCIpXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgdGV4dFxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIjZcIilcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua3NfbnVtKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtzX251bSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIEJ1dGxlclNldHRpbmdzIHtcbiAgdmF1bHRQYXRoOiBzdHJpbmc7XG4gIG9wZW5BSUtleTogc3RyaW5nO1xuICBwaW5lY29uZUtleTogc3RyaW5nO1xuICBwaW5lY29uZUluZGV4TmFtZTogc3RyaW5nO1xuICBwaW5lY29uZUVudjogc3RyaW5nO1xuICBweXRob25QYXRoOiBzdHJpbmc7XG4gIGxpbmtzX251bTogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBCdXRsZXJTZXR0aW5ncyA9IHtcbiAgdmF1bHRQYXRoOiBcImRlZmF1bHRcIixcbiAgb3BlbkFJS2V5OiBcImRlZmF1bHRcIixcbiAgcGluZWNvbmVLZXk6IFwiZGVmYXVsdFwiLFxuICBwaW5lY29uZUluZGV4TmFtZTogXCJkZWZhdWx0XCIsXG4gIHBpbmVjb25lRW52OiBcInVzLWVhc3QxLWdjcFwiLFxuICBweXRob25QYXRoOiBcIjxwYXRoLXRvLXZpcnR1YWwtZW52PlwiLFxuICBsaW5rc19udW06IFwiNlwiLFxufTtcbiIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY29uc3QgV0laQVJEX1ZJRVcgPSBcIndpemFyZC12aWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBXaXphcmRWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XG4gICAgc3VwZXIobGVhZik7XG4gICAgdGhpcy5pY29uID0gJ3N1bidcbiAgfVxuXG4gIGdldFZpZXdUeXBlKCkge1xuICAgIHJldHVybiBXSVpBUkRfVklFVztcbiAgfVxuXG4gIGdldERpc3BsYXlUZXh0KCkge1xuICAgIHJldHVybiBcIlJlbGF0ZWQgSWRlYXNcIjtcbiAgfVxuXG4gIGFzeW5jIG9uT3BlbigpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImg0XCIsIHt0ZXh0OiBcIlJlbGF0ZWQgSWRlYXNcIiwgY2xzOiBcImhlYWRpbmdcIn0pO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlKHNlYXJjaF9yZXN1bHRzOiBbe1trZXk6IHN0cmluZ106IGFueX1dICl7IC8vXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcbiAgICAvL2NvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogXCJIZWxsbyBXb3JsZFwifSlcbiAgICBjb250YWluZXIuZW1wdHkoKVxuICAgIGNvbnN0IG91dGVyRGl2ID0gY29udGFpbmVyLmNyZWF0ZUVsKFwiaDRcIiwge3RleHQ6IFwiUmVsYXRlZCBJZGVhc1xcblwiLCBjbHM6IFwiaGVhZGluZ1wifSk7XG4gICAgLy9jb25zb2xlLmxvZyhcIkxldHMgdXBkYXRlZWVcIilcbiAgICBmb3IgKGxldCBkaWN0IG9mIHNlYXJjaF9yZXN1bHRzKXtcbiAgICAgIC8vY29uc29sZS5sb2coYEhFTExPIERJQ1Q6ICR7ZGljdH1gKVxuICAgICAgbGV0IHNvdXJjZV9uYW1lID0gT2JqZWN0LmtleXMoZGljdClbMF1cbiAgICAgIC8vY29uc29sZS5sb2coYEhFTExPIFNPVVJDRSBOQU1FOiAke3NvdXJjZV9uYW1lfWApXG4gICAgICAvL2xldCBzb3VyY2VfbmFtZSA9IGtleVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgbGV0IGluZm8gPSBkaWN0W3NvdXJjZV9uYW1lXVxuICAgICAgbGV0IHNvdXJjZV9wYXRoID0gaW5mb1snc291cmNlX3BhdGgnXVxuICAgICAgbGV0IHRleHQgPSBpbmZvWyd0ZXh0J11cbiAgICAgIGNvbnN0IHF1b3RlID0gY29udGFpbmVyLmNyZWF0ZUVsKFwiYmxvY2txdW90ZVwiLCB7dGV4dDogdGV4dCwgY2xzOiBcInF1b3RlXCJ9KVxuICAgICAgY29uc3QgbGluayA9IHF1b3RlLmNyZWF0ZUVsKFwiYVwiLCB7IGhyZWY6IHNvdXJjZV9wYXRoLCBhdHRyOiB7IFwiZGF0YS1wYXRoXCI6IHNvdXJjZV9wYXRoIH0gfSk7XG4gICAgICBsaW5rLmNyZWF0ZUVsKFwic3BhblwiLCB7ICAgXG4gICAgICAgICAgICAgICAgICB0ZXh0OiAnXFxuLS0nICsgc291cmNlX25hbWUgXG4gICAgICAgICAgfVxuICAgICAgKTtcblxuXG5cbiAgICB9XG5cbiAgICAvL2NvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogcmVzdWx0cy5hdCgwKX0pXG4gICAgLy9vdXRlckRpdi5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IFwiXCIgfSk7XG4gICAgLy9vdXRlckRpdi5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJvdXRnb2luZy1saW5rLWhlYWRlclwiLCB0ZXh0OiBcIlx1MjZGMFwiIH0pO1xuICAgIFxuXG4gIH1cblxuICBhc3luYyBvbkNsb3NlKCkge1xuICAgIC8vIE5vdGhpbmcgdG8gY2xlYW4gdXAuXG4gIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFFQSxZQUFPLFVBQVUsY0FBYyxJQUFJLFNBQVM7QUFDMUMsYUFBTyxnQkFBZ0I7QUFDckIsWUFBSSxPQUFPLElBQUksTUFBTSxVQUFVLE1BQU07QUFDckMsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEMsZUFBSyxLQUFLLFVBQVU7QUFBQSxRQUN0QjtBQUNBLGVBQU8sR0FBRyxNQUFNLFNBQVMsSUFBSTtBQUFBLE1BQy9CO0FBQUEsSUFDRjtBQUFBO0FBQUE7OztBQ1ZBO0FBQUE7QUFBQTtBQUVBLFFBQUksT0FBTztBQUlYLFFBQUksV0FBVyxPQUFPLFVBQVU7QUFRaEMscUJBQWlCLEtBQUs7QUFDcEIsYUFBTyxNQUFNLFFBQVEsR0FBRztBQUFBLElBQzFCO0FBUUEseUJBQXFCLEtBQUs7QUFDeEIsYUFBTyxPQUFPLFFBQVE7QUFBQSxJQUN4QjtBQVFBLHNCQUFrQixLQUFLO0FBQ3JCLGFBQU8sUUFBUSxRQUFRLENBQUMsWUFBWSxHQUFHLEtB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
